// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20250610023330_SquashMigrations")]
    partial class SquashMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Footnote.Footnote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("footnote");
                });

            modelBuilder.Entity("Data.Entities.Footnote.UserFootnote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("LastSeen")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_footnote");
                });

            modelBuilder.Entity("Data.Entities.Genetics.Gene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisabledReason")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("gene");
                });

            modelBuilder.Entity("Data.Entities.Genetics.SNP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisabledReason")
                        .HasColumnType("text");

                    b.Property<int>("GeneId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeneId");

                    b.ToTable("snp");
                });

            modelBuilder.Entity("Data.Entities.Genetics.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisabledReason")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("study");
                });

            modelBuilder.Entity("Data.Entities.Genetics.StudySNP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectAllele")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GeneId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("SNPId")
                        .HasColumnType("integer");

                    b.Property<int>("StudyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeneId");

                    b.HasIndex("SNPId");

                    b.HasIndex("StudyId");

                    b.ToTable("study_snp");
                });

            modelBuilder.Entity("Data.Entities.Genetics.StudySupplement", b =>
                {
                    b.Property<int>("StudyId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("integer");

                    b.HasKey("StudyId", "UserTaskId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("study_supplement");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Logs")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_diary");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiaryTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<int>("UserDiaryId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDiaryId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("user_diary_task");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("integer");

                    b.Property<string>("LastError")
                        .HasColumnType("text");

                    b.Property<DateTime>("SendAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SendAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_email");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChartDays")
                        .HasColumnType("integer");

                    b.Property<int>("DeloadAfterXWeeks")
                        .HasColumnType("integer");

                    b.Property<int>("DeloadDurationWeeks")
                        .HasColumnType("integer");

                    b.Property<string>("DisabledReason")
                        .HasColumnType("text");

                    b.Property<int>("LagRefreshXDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("LastCompleted")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LastDeload")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LastSeen")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PadRefreshXDays")
                        .HasColumnType("integer");

                    b.Property<bool>("PersistUntilComplete")
                        .HasColumnType("boolean");

                    b.Property<double?>("ReferenceMax")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReferenceMin")
                        .HasColumnType("double precision");

                    b.Property<DateOnly?>("RefreshAfter")
                        .HasColumnType("date");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowLog")
                        .HasColumnType("boolean");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_task");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Complete")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskId");

                    b.ToTable("user_task_log");
                });

            modelBuilder.Entity("Data.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptedTerms")
                        .HasColumnType("boolean");

                    b.Property<long>("Components")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FeastEmail")
                        .HasColumnType("text");

                    b.Property<string>("FeastToken")
                        .HasColumnType("text");

                    b.Property<int>("Features")
                        .HasColumnType("integer");

                    b.Property<int>("FootnoteCountBottom")
                        .HasColumnType("integer");

                    b.Property<int>("FootnoteCountTop")
                        .HasColumnType("integer");

                    b.Property<int>("FootnoteType")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("LastActive")
                        .HasColumnType("date");

                    b.Property<string>("NewsletterDisabledReason")
                        .HasColumnType("text");

                    b.Property<int>("SendDays")
                        .HasColumnType("integer");

                    b.Property<int>("SendHour")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<int>("Verbosity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Data.Entities.User.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_activity");
                });

            modelBuilder.Entity("Data.Entities.User.UserAcuteStressSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Alert")
                        .HasColumnType("integer");

                    b.Property<int?>("Avoid")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Distant")
                        .HasColumnType("integer");

                    b.Property<int?>("Flashbacks")
                        .HasColumnType("integer");

                    b.Property<int?>("Irritable")
                        .HasColumnType("integer");

                    b.Property<int?>("Startled")
                        .HasColumnType("integer");

                    b.Property<int?>("Upset")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_acute_stress_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserAgoraphobiaSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Distracted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fright")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Panic")
                        .HasColumnType("integer");

                    b.Property<int?>("Preparing")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_agoraphobia_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserAllergens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_allergens");
                });

            modelBuilder.Entity("Data.Entities.User.UserAnger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Angry")
                        .HasColumnType("integer");

                    b.Property<int?>("Annoyed")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Explode")
                        .HasColumnType("integer");

                    b.Property<int?>("Grouchy")
                        .HasColumnType("integer");

                    b.Property<int?>("Irritated")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_anger");
                });

            modelBuilder.Entity("Data.Entities.User.UserAnxiety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Anxious")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Fearful")
                        .HasColumnType("integer");

                    b.Property<int?>("Focus")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int?>("Uneasy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Worried")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_anxiety");
                });

            modelBuilder.Entity("Data.Entities.User.UserBloodPressure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DiastolicPressure")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicPressure")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_blood_pressure");
                });

            modelBuilder.Entity("Data.Entities.User.UserBloodWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Homocysteine")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("VitaminA")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_blood_work");
                });

            modelBuilder.Entity("Data.Entities.User.UserBodyTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BodyTemp")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_body_temp");
                });

            modelBuilder.Entity("Data.Entities.User.UserCbcWAutoDiff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BasophilAbsolute")
                        .HasColumnType("integer");

                    b.Property<int?>("BasophilPercent")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EosinophilAbsolute")
                        .HasColumnType("integer");

                    b.Property<int?>("EosinophilPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("Hematocrit")
                        .HasColumnType("integer");

                    b.Property<int?>("Hemoglobin")
                        .HasColumnType("integer");

                    b.Property<int?>("ImmatureGranulocytesPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("LymphocyteAbsolute")
                        .HasColumnType("integer");

                    b.Property<int?>("MCH")
                        .HasColumnType("integer");

                    b.Property<int?>("MCHC")
                        .HasColumnType("integer");

                    b.Property<int?>("MCV")
                        .HasColumnType("integer");

                    b.Property<int?>("MPV")
                        .HasColumnType("integer");

                    b.Property<int?>("MonocyteAbsolute")
                        .HasColumnType("integer");

                    b.Property<int?>("MonocytePercent")
                        .HasColumnType("integer");

                    b.Property<int?>("NeutrophilAbsolute")
                        .HasColumnType("integer");

                    b.Property<int?>("PlatletCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RBCCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RDW_CV")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("WBC")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_cbc_w_auto_diff");
                });

            modelBuilder.Entity("Data.Entities.User.UserCompleteMetabolicPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ALT")
                        .HasColumnType("integer");

                    b.Property<int?>("AST")
                        .HasColumnType("integer");

                    b.Property<int?>("Albumin")
                        .HasColumnType("integer");

                    b.Property<int?>("AlkalinePhosphatase")
                        .HasColumnType("integer");

                    b.Property<int?>("AnionGap")
                        .HasColumnType("integer");

                    b.Property<int?>("BUN")
                        .HasColumnType("integer");

                    b.Property<double?>("BilirubinTotal")
                        .HasColumnType("double precision");

                    b.Property<int?>("CO2")
                        .HasColumnType("integer");

                    b.Property<int?>("Calcium")
                        .HasColumnType("integer");

                    b.Property<int?>("Chloride")
                        .HasColumnType("integer");

                    b.Property<int?>("Creatinine")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EGFRbyCKDEPI")
                        .HasColumnType("integer");

                    b.Property<int?>("Glucose")
                        .HasColumnType("integer");

                    b.Property<int?>("Potassium")
                        .HasColumnType("integer");

                    b.Property<int?>("ProteinTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("Sodium")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_complete_metabolic_panel");
                });

            modelBuilder.Entity("Data.Entities.User.UserComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Component")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("LastUpload")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_component");
                });

            modelBuilder.Entity("Data.Entities.User.UserComponentSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("Component")
                        .HasColumnType("bigint");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<int>("SubComponents")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "Component");

                    b.ToTable("user_component_setting");
                });

            modelBuilder.Entity("Data.Entities.User.UserCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_custom");
                });

            modelBuilder.Entity("Data.Entities.User.UserDepression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Depressed")
                        .HasColumnType("integer");

                    b.Property<int?>("Failure")
                        .HasColumnType("integer");

                    b.Property<int?>("Helpless")
                        .HasColumnType("integer");

                    b.Property<int?>("Hopeless")
                        .HasColumnType("integer");

                    b.Property<int?>("NoFuture")
                        .HasColumnType("integer");

                    b.Property<int?>("Sad")
                        .HasColumnType("integer");

                    b.Property<int?>("Unhappy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Worthless")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_depression");
                });

            modelBuilder.Entity("Data.Entities.User.UserDepressionSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BetterOffDead")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Eating")
                        .HasColumnType("integer");

                    b.Property<int?>("FeelingBad")
                        .HasColumnType("integer");

                    b.Property<int?>("Hopeless")
                        .HasColumnType("integer");

                    b.Property<int?>("NoConcentration")
                        .HasColumnType("integer");

                    b.Property<int?>("NoEnergy")
                        .HasColumnType("integer");

                    b.Property<int?>("NoInterest")
                        .HasColumnType("integer");

                    b.Property<int?>("Sleeping")
                        .HasColumnType("integer");

                    b.Property<int?>("Slowly")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_depression_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserDissociativeSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DifferentPeople")
                        .HasColumnType("integer");

                    b.Property<int?>("EasyWhenHard")
                        .HasColumnType("integer");

                    b.Property<int?>("IgnorePain")
                        .HasColumnType("integer");

                    b.Property<int?>("NoMemory")
                        .HasColumnType("integer");

                    b.Property<int?>("Nothing")
                        .HasColumnType("integer");

                    b.Property<int?>("TalkOutLoud")
                        .HasColumnType("integer");

                    b.Property<int?>("Unclear")
                        .HasColumnType("integer");

                    b.Property<int?>("Unreal")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_dissociative_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserDryEyes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BurningFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("BurningSeverity")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DropDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("DropsLast4Hours")
                        .HasColumnType("boolean");

                    b.Property<bool>("DropsUsedToday")
                        .HasColumnType("boolean");

                    b.Property<int?>("DrynessFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("DrynessSeverity")
                        .HasColumnType("integer");

                    b.Property<bool>("EyeDrops")
                        .HasColumnType("boolean");

                    b.Property<int?>("FatigueFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("FatigueSeverity")
                        .HasColumnType("integer");

                    b.Property<bool>("GelsLast12Hours")
                        .HasColumnType("boolean");

                    b.Property<int?>("LastExeriencedSymptoms")
                        .HasColumnType("integer");

                    b.Property<bool>("MakeupToday")
                        .HasColumnType("boolean");

                    b.Property<bool>("MoisturizerToday")
                        .HasColumnType("boolean");

                    b.Property<int?>("SorenessFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("SorenessSeverity")
                        .HasColumnType("integer");

                    b.Property<bool>("TouchedEyesToday")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("VisualBlinking")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_dry_eyes");
                });

            modelBuilder.Entity("Data.Entities.User.UserEmotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_emotion");
                });

            modelBuilder.Entity("Data.Entities.User.UserGeneralizedAnxietySeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Accidents")
                        .HasColumnType("integer");

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Fright")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Reassurance")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int?>("Time")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_generalized_anxiety_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutBadBacteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Blautia")
                        .HasColumnType("double precision");

                    b.Property<double?>("CitrobacterFreundii")
                        .HasColumnType("double precision");

                    b.Property<double?>("ClostridioidesDifficile")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Eggerthella")
                        .HasColumnType("double precision");

                    b.Property<double?>("EggerthellaLenta")
                        .HasColumnType("double precision");

                    b.Property<double?>("Enterobacteriaceae")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnterobacteriaceaeAndPseudomonas")
                        .HasColumnType("double precision");

                    b.Property<double?>("Enterococcus")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnterococcusFaecalis")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnterococcusFaecalisAndFaecium")
                        .HasColumnType("double precision");

                    b.Property<double?>("EnterococcusFaecium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Escherichia")
                        .HasColumnType("double precision");

                    b.Property<double?>("EscherichiaColi")
                        .HasColumnType("double precision");

                    b.Property<double?>("Klebsiella")
                        .HasColumnType("double precision");

                    b.Property<double?>("RuminococcusGnavus")
                        .HasColumnType("double precision");

                    b.Property<double?>("RuminococcusTorques")
                        .HasColumnType("double precision");

                    b.Property<double?>("Staphylococcus")
                        .HasColumnType("double precision");

                    b.Property<double?>("StaphylococcusAureus")
                        .HasColumnType("double precision");

                    b.Property<double?>("StreptococcusMinusThermophilusAndSalivarius")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double?>("Veillonella")
                        .HasColumnType("double precision");

                    b.Property<double?>("YersiniaEnterocolitica")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_bad_bacteria");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutConditionalBacteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Bacteroides")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Lactobacillus")
                        .HasColumnType("double precision");

                    b.Property<double?>("Methanobacteria")
                        .HasColumnType("double precision");

                    b.Property<double?>("Oscillibacter")
                        .HasColumnType("double precision");

                    b.Property<double?>("Prevotella")
                        .HasColumnType("double precision");

                    b.Property<double?>("RuminococcusBromii")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_conditional_bacteria");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutFungi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("TotalFungi")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_fungi");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutGoodBacteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AkkermansiaMuciniphila")
                        .HasColumnType("double precision");

                    b.Property<double?>("Alistipes")
                        .HasColumnType("double precision");

                    b.Property<double?>("Bifidobacterium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Coprococcus")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Eubacterium")
                        .HasColumnType("double precision");

                    b.Property<double?>("EubacteriumRectale")
                        .HasColumnType("double precision");

                    b.Property<double?>("FaecalibacteriumPrausnitzii")
                        .HasColumnType("double precision");

                    b.Property<double?>("LachnospiraceaeMinusBlautia")
                        .HasColumnType("double precision");

                    b.Property<double?>("Oscillospira")
                        .HasColumnType("double precision");

                    b.Property<double?>("Parabacteroides")
                        .HasColumnType("double precision");

                    b.Property<double?>("Roseburia")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ruminococcaceae")
                        .HasColumnType("double precision");

                    b.Property<double?>("RuminococcusMinusRBromii")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_good_bacteria");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutMicronutrients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double?>("VitaminB12")
                        .HasColumnType("double precision");

                    b.Property<double?>("VitaminB3")
                        .HasColumnType("double precision");

                    b.Property<double?>("VitaminB6")
                        .HasColumnType("double precision");

                    b.Property<double?>("VitaminB9")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_micronutrients");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutPathogens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Blastocystis")
                        .HasColumnType("integer");

                    b.Property<int?>("Campylobacter")
                        .HasColumnType("integer");

                    b.Property<int?>("ClostridioidesDifficile")
                        .HasColumnType("integer");

                    b.Property<int?>("Cryptosporidium")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DientamoebaFragilis")
                        .HasColumnType("integer");

                    b.Property<int?>("EntamoebaHistolytica")
                        .HasColumnType("integer");

                    b.Property<int?>("EscherichiaColiO157_H7")
                        .HasColumnType("integer");

                    b.Property<int?>("GiardiaIntestinalis")
                        .HasColumnType("integer");

                    b.Property<int?>("HelicobacterPylori")
                        .HasColumnType("integer");

                    b.Property<int?>("SalmonellaEnterica")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("VibrioCholerae")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_pathogens");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutPillars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Digestion")
                        .HasColumnType("double precision");

                    b.Property<int?>("DiversityScore")
                        .HasColumnType("integer");

                    b.Property<double?>("GutDysbiosis")
                        .HasColumnType("double precision");

                    b.Property<int?>("ImmuneReadinessScore")
                        .HasColumnType("integer");

                    b.Property<double?>("Inflammation")
                        .HasColumnType("double precision");

                    b.Property<double?>("IntestinalPermeability")
                        .HasColumnType("double precision");

                    b.Property<double?>("NervousSystem")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_pillars");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutProbiotics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("BacillusCoagulans")
                        .HasColumnType("double precision");

                    b.Property<double?>("BifidobacteriumAnimalisSubspAnimalis")
                        .HasColumnType("double precision");

                    b.Property<double?>("BifidobacteriumAnimalisSubspLactis")
                        .HasColumnType("double precision");

                    b.Property<double?>("BifidobacteriumBifidum")
                        .HasColumnType("double precision");

                    b.Property<double?>("BifidobacteriumBreve")
                        .HasColumnType("double precision");

                    b.Property<double?>("BifidobacteriumLongumSubspInfantis")
                        .HasColumnType("double precision");

                    b.Property<double?>("BifidobacteriumLongumSubspLongum")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("LactobacillusAcidophilus")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusBrevis")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusCasei")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusDelbrueckiiSubspBulgaricus")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusDelbrueckiiSubspDelbrueckii")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusFermentum")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusGasseri")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusHelveticus")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusParacasei")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusPlantarum")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusReuteri")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusRhamnosus")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactobacillusSalivarius")
                        .HasColumnType("double precision");

                    b.Property<double?>("LactococcusLactis")
                        .HasColumnType("double precision");

                    b.Property<double?>("PropionibacteriumFreudenreichii")
                        .HasColumnType("double precision");

                    b.Property<double?>("StreptococcusSalivarius")
                        .HasColumnType("double precision");

                    b.Property<double?>("StreptococcusThermophilus")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_probiotics");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutShortChainFattyAcids", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Butyrate")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Lactate")
                        .HasColumnType("double precision");

                    b.Property<double?>("Propionate")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double?>("Valerate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_gut_short_chain_fatty_acids");
                });

            modelBuilder.Entity("Data.Entities.User.UserJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_journal");
                });

            modelBuilder.Entity("Data.Entities.User.UserMania", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Question1")
                        .HasColumnType("integer");

                    b.Property<int?>("Question2")
                        .HasColumnType("integer");

                    b.Property<int?>("Question3")
                        .HasColumnType("integer");

                    b.Property<int?>("Question4")
                        .HasColumnType("integer");

                    b.Property<int?>("Question5")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_mania");
                });

            modelBuilder.Entity("Data.Entities.User.UserMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_medicine");
                });

            modelBuilder.Entity("Data.Entities.User.UserMood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Mood")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_mood");
                });

            modelBuilder.Entity("Data.Entities.User.UserPanicSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DistractedMyself")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("LosingControl")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Preparing")
                        .HasColumnType("integer");

                    b.Property<int?>("SuddenTerror")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_panic_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserPeople", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_people");
                });

            modelBuilder.Entity("Data.Entities.User.UserPostTraumaticStressSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Alert")
                        .HasColumnType("integer");

                    b.Property<int?>("Avoid")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Flashbacks")
                        .HasColumnType("integer");

                    b.Property<int?>("Irritable")
                        .HasColumnType("integer");

                    b.Property<int?>("NegativeEmotions")
                        .HasColumnType("integer");

                    b.Property<int?>("NoInterest")
                        .HasColumnType("integer");

                    b.Property<int?>("Startled")
                        .HasColumnType("integer");

                    b.Property<int?>("StressfulEvent")
                        .HasColumnType("integer");

                    b.Property<int?>("Upset")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_posttraumatic_stress_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserSalivaStress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("DHEA")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("DaytimeCortisol")
                        .HasColumnType("double precision");

                    b.Property<double?>("EveningCortisol")
                        .HasColumnType("double precision");

                    b.Property<double?>("MorningCortisol")
                        .HasColumnType("double precision");

                    b.Property<double?>("NightCortisol")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_saliva_stress");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumAutoimmunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AntinuclearAntibodies")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("RheumatoidFactor")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_autoimmunity");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Hematocrit")
                        .HasColumnType("double precision");

                    b.Property<double?>("Hemoglobin")
                        .HasColumnType("double precision");

                    b.Property<double?>("MCH")
                        .HasColumnType("double precision");

                    b.Property<double?>("MCHC")
                        .HasColumnType("double precision");

                    b.Property<double?>("MCV")
                        .HasColumnType("double precision");

                    b.Property<double?>("MPV")
                        .HasColumnType("double precision");

                    b.Property<double?>("PlateletCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RBCCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RDW")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_blood");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumElectrolytes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Calcium")
                        .HasColumnType("double precision");

                    b.Property<double?>("CarbonDioxide")
                        .HasColumnType("double precision");

                    b.Property<double?>("Chloride")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Potassium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sodium")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_electolytes");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumFemaleHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("DHEASulfate")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("E2")
                        .HasColumnType("double precision");

                    b.Property<double?>("FSH")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreePSA")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreePSAPercent")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreeTestosterone")
                        .HasColumnType("double precision");

                    b.Property<double?>("LH")
                        .HasColumnType("double precision");

                    b.Property<double?>("Prolactin")
                        .HasColumnType("double precision");

                    b.Property<double?>("SHBG")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalPSA")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTestosterone")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_female_health");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumHeart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("HDLCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double?>("HDLLarge")
                        .HasColumnType("double precision");

                    b.Property<double?>("HsCRP")
                        .HasColumnType("double precision");

                    b.Property<double?>("LDLCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double?>("LDLMedium")
                        .HasColumnType("double precision");

                    b.Property<double?>("LDLParticleNumber")
                        .HasColumnType("double precision");

                    b.Property<double?>("LDLPattern")
                        .HasColumnType("double precision");

                    b.Property<double?>("LDLPeakSize")
                        .HasColumnType("double precision");

                    b.Property<double?>("LDLSmall")
                        .HasColumnType("double precision");

                    b.Property<double?>("LipoproteinA")
                        .HasColumnType("double precision");

                    b.Property<double?>("NonHDLCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalCholesterolHDL")
                        .HasColumnType("double precision");

                    b.Property<double?>("Triglycerides")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_heart");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumHeavyMetals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Lead")
                        .HasColumnType("double precision");

                    b.Property<int?>("Mercury")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_heavy_metals");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumImmuneRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Basophilis")
                        .HasColumnType("double precision");

                    b.Property<double?>("BasophilisPercent")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Eosinophilis")
                        .HasColumnType("double precision");

                    b.Property<double?>("EosinophilisPercent")
                        .HasColumnType("double precision");

                    b.Property<double?>("HsCRP")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lymphocytes")
                        .HasColumnType("double precision");

                    b.Property<double?>("LymphocytesPercent")
                        .HasColumnType("double precision");

                    b.Property<double?>("Monocytes")
                        .HasColumnType("double precision");

                    b.Property<double?>("MonocytesPercent")
                        .HasColumnType("double precision");

                    b.Property<double?>("Neutrophilis")
                        .HasColumnType("double precision");

                    b.Property<double?>("NeutrophilisPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double?>("WBCCount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_immune_regulation");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumKidney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AlbuminUrine")
                        .HasColumnType("double precision");

                    b.Property<double?>("BUN")
                        .HasColumnType("double precision");

                    b.Property<double?>("Calcium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Chloride")
                        .HasColumnType("double precision");

                    b.Property<double?>("Creatinine")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("EGFR")
                        .HasColumnType("double precision");

                    b.Property<double?>("Potassium")
                        .HasColumnType("double precision");

                    b.Property<double?>("Sodium")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_kidney");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumLiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("ALP")
                        .HasColumnType("double precision");

                    b.Property<double?>("ALT")
                        .HasColumnType("double precision");

                    b.Property<double?>("AST")
                        .HasColumnType("double precision");

                    b.Property<double?>("Albumin")
                        .HasColumnType("double precision");

                    b.Property<double?>("AlbuminGlobulin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Bilirubin")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("GGT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Globulin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Protein")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_liver");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumMaleHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("DHEASulfate")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("E2")
                        .HasColumnType("double precision");

                    b.Property<double?>("FSH")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreePSA")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreePSAPercent")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreeTestosterone")
                        .HasColumnType("double precision");

                    b.Property<double?>("LH")
                        .HasColumnType("double precision");

                    b.Property<double?>("Prolactin")
                        .HasColumnType("double precision");

                    b.Property<double?>("SHBG")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalPSA")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTestosterone")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_male_health");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumMetabolic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Glucose")
                        .HasColumnType("double precision");

                    b.Property<double?>("HbA1c")
                        .HasColumnType("double precision");

                    b.Property<double?>("Insulin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Leptin")
                        .HasColumnType("double precision");

                    b.Property<double?>("UricAcid")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_metabolic");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumNutrients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Calcium")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Ferritin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Homocysteine")
                        .HasColumnType("double precision");

                    b.Property<double?>("Iron")
                        .HasColumnType("double precision");

                    b.Property<double?>("IronBindingCapacity")
                        .HasColumnType("double precision");

                    b.Property<double?>("IronSat")
                        .HasColumnType("double precision");

                    b.Property<double?>("MMA")
                        .HasColumnType("double precision");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double?>("VitaminD")
                        .HasColumnType("double precision");

                    b.Property<double?>("Zinc")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_nutrients");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumPancreas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Amylase")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Lipase")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_pancreas");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumStress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DHEASulfate")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_stress");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumThyroid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("T3")
                        .HasColumnType("double precision");

                    b.Property<double?>("T4")
                        .HasColumnType("double precision");

                    b.Property<double?>("TPO")
                        .HasColumnType("double precision");

                    b.Property<double?>("TSH")
                        .HasColumnType("double precision");

                    b.Property<double?>("TgAb")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_serum_thyroid");
                });

            modelBuilder.Entity("Data.Entities.User.UserSleep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("SleepDuration")
                        .HasColumnType("integer");

                    b.Property<int>("SleepTime")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_sleep");
                });

            modelBuilder.Entity("Data.Entities.User.UserSocialAnxietySeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DistractedMyself")
                        .HasColumnType("integer");

                    b.Property<int?>("Fright")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("Humiliated")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Preparing")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_social_anxiety_severity");
                });

            modelBuilder.Entity("Data.Entities.User.UserSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_symptom");
                });

            modelBuilder.Entity("Data.Entities.User.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Token");

                    b.ToTable("user_token");
                });

            modelBuilder.Entity("Data.Entities.User.UserUrine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Albumin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Bilirubin")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Glucose")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ketones")
                        .HasColumnType("double precision");

                    b.Property<double?>("Leukocyte")
                        .HasColumnType("double precision");

                    b.Property<double?>("Nitrate")
                        .HasColumnType("double precision");

                    b.Property<double?>("OccultBlood")
                        .HasColumnType("double precision");

                    b.Property<double?>("PH")
                        .HasColumnType("double precision");

                    b.Property<double?>("Protein")
                        .HasColumnType("double precision");

                    b.Property<double?>("SpecificGravity")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_urine");
                });

            modelBuilder.Entity("UserActivityUserCustom", b =>
                {
                    b.Property<int>("UserActivitiesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.HasKey("UserActivitiesId", "UserCustomsId");

                    b.HasIndex("UserCustomsId");

                    b.ToTable("UserActivityUserCustom");
                });

            modelBuilder.Entity("UserCustomUserEmotion", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserEmotionsId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserEmotionsId");

                    b.HasIndex("UserEmotionsId");

                    b.ToTable("UserCustomUserEmotion");
                });

            modelBuilder.Entity("UserCustomUserMedicine", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserMedicinesId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserMedicinesId");

                    b.HasIndex("UserMedicinesId");

                    b.ToTable("UserCustomUserMedicine");
                });

            modelBuilder.Entity("UserCustomUserPeople", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserPeoplesId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserPeoplesId");

                    b.HasIndex("UserPeoplesId");

                    b.ToTable("UserCustomUserPeople");
                });

            modelBuilder.Entity("UserCustomUserSleep", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserSleepsId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserSleepsId");

                    b.HasIndex("UserSleepsId");

                    b.ToTable("UserCustomUserSleep");
                });

            modelBuilder.Entity("UserCustomUserSymptom", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserSymptomsId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserSymptomsId");

                    b.HasIndex("UserSymptomsId");

                    b.ToTable("UserCustomUserSymptom");
                });

            modelBuilder.Entity("Data.Entities.Footnote.UserFootnote", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserFootnotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Genetics.SNP", b =>
                {
                    b.HasOne("Data.Entities.Genetics.Gene", "Gene")
                        .WithMany("SNPs")
                        .HasForeignKey("GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gene");
                });

            modelBuilder.Entity("Data.Entities.Genetics.StudySNP", b =>
                {
                    b.HasOne("Data.Entities.Genetics.Gene", "Gene")
                        .WithMany("StudySNPs")
                        .HasForeignKey("GeneId");

                    b.HasOne("Data.Entities.Genetics.SNP", "SNP")
                        .WithMany("StudySNPs")
                        .HasForeignKey("SNPId");

                    b.HasOne("Data.Entities.Genetics.Study", "Study")
                        .WithMany("StudySNPs")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gene");

                    b.Navigation("SNP");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Data.Entities.Genetics.StudySupplement", b =>
                {
                    b.HasOne("Data.Entities.Genetics.Study", "Study")
                        .WithMany("StudySupplements")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Task.UserTask", "UserTask")
                        .WithMany("StudySupplements")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Study");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiaryTask", b =>
                {
                    b.HasOne("Data.Entities.Newsletter.UserDiary", "UserDiary")
                        .WithMany("UserDiaryTasks")
                        .HasForeignKey("UserDiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Task.UserTask", "UserTask")
                        .WithMany("UserDiaryTasks")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDiary");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserEmail", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTask", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTaskLog", b =>
                {
                    b.HasOne("Data.Entities.Task.UserTask", "UserTask")
                        .WithMany("UserTaskLogs")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.Entities.User.UserActivity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAcuteStressSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAcuteStressSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAgoraphobiaSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAgoraphobiaSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAllergens", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAllergens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAnger", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAngers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAnxiety", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAnxieties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserBloodPressure", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserBloodPressures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserBloodWork", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserBloodWorks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserBodyTemp", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserBodyTemps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserCbcWAutoDiff", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserCbcWAutoDiffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserCompleteMetabolicPanel", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserCompleteMetabolicPanels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserComponent", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserComponents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserComponentSetting", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserComponentSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserCustom", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserCustoms")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDepression", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDepressions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDepressionSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDepressionSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDissociativeSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDissociativeSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDryEyes", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDryEyes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserEmotion", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserEmotions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGeneralizedAnxietySeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGeneralizedAnxietySeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutBadBacteria", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutBadBacteria")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutConditionalBacteria", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutConditionalBacteria")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutFungi", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutFungi")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutGoodBacteria", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutGoodBacteria")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutMicronutrients", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutMicronutrients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutPathogens", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutPathogens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutPillars", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutPillars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutProbiotics", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutProbiotics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGutShortChainFattyAcids", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGutShortChainFattyAcids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserJournal", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserJournals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserMania", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserManias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserMedicine", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserMedicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserMood", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserMoods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserPanicSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserPanicSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserPeople", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserPeoples")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserPostTraumaticStressSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserPostTraumaticStressSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSalivaStress", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSalivaStress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumAutoimmunity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumAutoimmunitys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumBlood", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumBloods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumElectrolytes", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumElectrolytes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumFemaleHealth", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumFemaleHealths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumHeart", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumHearts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumHeavyMetals", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumHeavyMetals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumImmuneRegulation", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumImmuneRegulations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumKidney", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumKidneys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumLiver", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumLivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumMaleHealth", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumMaleHealths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumMetabolic", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumMetabolics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumNutrients", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumNutrients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumPancreas", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumPancreas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumStress", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumStress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSerumThyroid", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSerumThyroids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSleep", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSleeps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSocialAnxietySeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSocialAnxietySeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSymptom", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSymptoms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserToken", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserUrine", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserUrines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserActivityUserCustom", b =>
                {
                    b.HasOne("Data.Entities.User.UserActivity", null)
                        .WithMany()
                        .HasForeignKey("UserActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserEmotion", b =>
                {
                    b.HasOne("Data.Entities.User.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserEmotion", null)
                        .WithMany()
                        .HasForeignKey("UserEmotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserMedicine", b =>
                {
                    b.HasOne("Data.Entities.User.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserMedicine", null)
                        .WithMany()
                        .HasForeignKey("UserMedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserPeople", b =>
                {
                    b.HasOne("Data.Entities.User.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserPeople", null)
                        .WithMany()
                        .HasForeignKey("UserPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserSleep", b =>
                {
                    b.HasOne("Data.Entities.User.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserSleep", null)
                        .WithMany()
                        .HasForeignKey("UserSleepsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserSymptom", b =>
                {
                    b.HasOne("Data.Entities.User.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserSymptom", null)
                        .WithMany()
                        .HasForeignKey("UserSymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Genetics.Gene", b =>
                {
                    b.Navigation("SNPs");

                    b.Navigation("StudySNPs");
                });

            modelBuilder.Entity("Data.Entities.Genetics.SNP", b =>
                {
                    b.Navigation("StudySNPs");
                });

            modelBuilder.Entity("Data.Entities.Genetics.Study", b =>
                {
                    b.Navigation("StudySNPs");

                    b.Navigation("StudySupplements");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiary", b =>
                {
                    b.Navigation("UserDiaryTasks");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTask", b =>
                {
                    b.Navigation("StudySupplements");

                    b.Navigation("UserDiaryTasks");

                    b.Navigation("UserTaskLogs");
                });

            modelBuilder.Entity("Data.Entities.User.User", b =>
                {
                    b.Navigation("UserActivities");

                    b.Navigation("UserAcuteStressSeverities");

                    b.Navigation("UserAgoraphobiaSeverities");

                    b.Navigation("UserAllergens");

                    b.Navigation("UserAngers");

                    b.Navigation("UserAnxieties");

                    b.Navigation("UserBloodPressures");

                    b.Navigation("UserBloodWorks");

                    b.Navigation("UserBodyTemps");

                    b.Navigation("UserCbcWAutoDiffs");

                    b.Navigation("UserCompleteMetabolicPanels");

                    b.Navigation("UserComponentSettings");

                    b.Navigation("UserComponents");

                    b.Navigation("UserCustoms");

                    b.Navigation("UserDepressionSeverities");

                    b.Navigation("UserDepressions");

                    b.Navigation("UserDissociativeSeverities");

                    b.Navigation("UserDryEyes");

                    b.Navigation("UserEmails");

                    b.Navigation("UserEmotions");

                    b.Navigation("UserFootnotes");

                    b.Navigation("UserGeneralizedAnxietySeverities");

                    b.Navigation("UserGutBadBacteria");

                    b.Navigation("UserGutConditionalBacteria");

                    b.Navigation("UserGutFungi");

                    b.Navigation("UserGutGoodBacteria");

                    b.Navigation("UserGutMicronutrients");

                    b.Navigation("UserGutPathogens");

                    b.Navigation("UserGutPillars");

                    b.Navigation("UserGutProbiotics");

                    b.Navigation("UserGutShortChainFattyAcids");

                    b.Navigation("UserJournals");

                    b.Navigation("UserManias");

                    b.Navigation("UserMedicines");

                    b.Navigation("UserMoods");

                    b.Navigation("UserPanicSeverities");

                    b.Navigation("UserPeoples");

                    b.Navigation("UserPostTraumaticStressSeverities");

                    b.Navigation("UserSalivaStress");

                    b.Navigation("UserSerumAutoimmunitys");

                    b.Navigation("UserSerumBloods");

                    b.Navigation("UserSerumElectrolytes");

                    b.Navigation("UserSerumFemaleHealths");

                    b.Navigation("UserSerumHearts");

                    b.Navigation("UserSerumHeavyMetals");

                    b.Navigation("UserSerumImmuneRegulations");

                    b.Navigation("UserSerumKidneys");

                    b.Navigation("UserSerumLivers");

                    b.Navigation("UserSerumMaleHealths");

                    b.Navigation("UserSerumMetabolics");

                    b.Navigation("UserSerumNutrients");

                    b.Navigation("UserSerumPancreas");

                    b.Navigation("UserSerumStress");

                    b.Navigation("UserSerumThyroids");

                    b.Navigation("UserSleeps");

                    b.Navigation("UserSocialAnxietySeverities");

                    b.Navigation("UserSymptoms");

                    b.Navigation("UserTasks");

                    b.Navigation("UserTokens");

                    b.Navigation("UserUrines");
                });
#pragma warning restore 612, 618
        }
    }
}
