// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20240817164516_AddTaskLogTracking2")]
    partial class AddTaskLogTracking2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Footnote.Footnote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("footnote", t =>
                        {
                            t.HasComment("Sage advice");
                        });
                });

            modelBuilder.Entity("Data.Entities.Footnote.UserCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_custom", t =>
                        {
                            t.HasComment("Sage advice");
                        });
                });

            modelBuilder.Entity("Data.Entities.Footnote.UserFootnote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("UserLastSeen")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_footnote", t =>
                        {
                            t.HasComment("Sage advice");
                        });
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Logs")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_diary", t =>
                        {
                            t.HasComment("A day's workout routine");
                        });
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiaryTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<int>("UserDiaryId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDiaryId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("user_diary_task", t =>
                        {
                            t.HasComment("A day's workout routine");
                        });
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("integer");

                    b.Property<string>("LastError")
                        .HasColumnType("text");

                    b.Property<DateTime>("SendAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SendAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_email", t =>
                        {
                            t.HasComment("A day's workout routine");
                        });
                });

            modelBuilder.Entity("Data.Entities.Task.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisabledReason")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("LagRefreshXDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("LastSeen")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PadRefreshXDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("RefreshAfter")
                        .HasColumnType("date");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_task", t =>
                        {
                            t.HasComment("Tasks listed on the website");
                        });
                });

            modelBuilder.Entity("Data.Entities.Task.UserTaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Complete")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskId");

                    b.ToTable("user_task_log", t =>
                        {
                            t.HasComment("User task log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptedTerms")
                        .HasColumnType("boolean");

                    b.Property<int>("Components")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FeastEmail")
                        .HasColumnType("text");

                    b.Property<string>("FeastToken")
                        .HasColumnType("text");

                    b.Property<int>("Features")
                        .HasColumnType("integer");

                    b.Property<int>("FootnoteCountBottom")
                        .HasColumnType("integer");

                    b.Property<int>("FootnoteCountTop")
                        .HasColumnType("integer");

                    b.Property<int>("FootnoteType")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("LastActive")
                        .HasColumnType("date");

                    b.Property<string>("NewsletterDisabledReason")
                        .HasColumnType("text");

                    b.Property<int>("SendDays")
                        .HasColumnType("integer");

                    b.Property<int>("SendHour")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<int>("Verbosity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", t =>
                        {
                            t.HasComment("User who signed up for the newsletter");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_activity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserAcuteStressSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Alert")
                        .HasColumnType("integer");

                    b.Property<int?>("Avoid")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Distant")
                        .HasColumnType("integer");

                    b.Property<int?>("Flashbacks")
                        .HasColumnType("integer");

                    b.Property<int?>("Irritable")
                        .HasColumnType("integer");

                    b.Property<int?>("Startled")
                        .HasColumnType("integer");

                    b.Property<int?>("Upset")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_acute_stress_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserAgoraphobiaSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Distracted")
                        .HasColumnType("integer");

                    b.Property<int?>("Fright")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Panic")
                        .HasColumnType("integer");

                    b.Property<int?>("Preparing")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_agoraphobia_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserAnger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Angry")
                        .HasColumnType("integer");

                    b.Property<int?>("Annoyed")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Explode")
                        .HasColumnType("integer");

                    b.Property<int?>("Grouchy")
                        .HasColumnType("integer");

                    b.Property<int?>("Irritated")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_anger", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserAnxiety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Anxious")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Fearful")
                        .HasColumnType("integer");

                    b.Property<int?>("Focus")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int?>("Uneasy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Worried")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_anxiety", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserCompleteMetabolicPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ALT")
                        .HasColumnType("integer");

                    b.Property<int?>("AST")
                        .HasColumnType("integer");

                    b.Property<int?>("Albumin")
                        .HasColumnType("integer");

                    b.Property<int?>("AlkalinePhosphatase")
                        .HasColumnType("integer");

                    b.Property<int?>("AnionGap")
                        .HasColumnType("integer");

                    b.Property<int?>("BUN")
                        .HasColumnType("integer");

                    b.Property<int?>("BilirubinTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("CO2")
                        .HasColumnType("integer");

                    b.Property<int?>("Calcium")
                        .HasColumnType("integer");

                    b.Property<int?>("Chloride")
                        .HasColumnType("integer");

                    b.Property<int?>("Creatinine")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EGFRbyCKDEPI")
                        .HasColumnType("integer");

                    b.Property<int?>("Glucose")
                        .HasColumnType("integer");

                    b.Property<int?>("Potassium")
                        .HasColumnType("integer");

                    b.Property<int?>("ProteinTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("Sodium")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_complete_metabolic_panel", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Component")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("LastUpload")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_component", t =>
                        {
                            t.HasComment("Auth tokens for a user");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserDepression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Depressed")
                        .HasColumnType("integer");

                    b.Property<int?>("Failure")
                        .HasColumnType("integer");

                    b.Property<int?>("Helpless")
                        .HasColumnType("integer");

                    b.Property<int?>("Hopeless")
                        .HasColumnType("integer");

                    b.Property<int?>("NoFuture")
                        .HasColumnType("integer");

                    b.Property<int?>("Sad")
                        .HasColumnType("integer");

                    b.Property<int?>("Unhappy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Worthless")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_depression", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserDepressionSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BetterOffDead")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Eating")
                        .HasColumnType("integer");

                    b.Property<int?>("FeelingBad")
                        .HasColumnType("integer");

                    b.Property<int?>("Hopeless")
                        .HasColumnType("integer");

                    b.Property<int?>("NoConcentration")
                        .HasColumnType("integer");

                    b.Property<int?>("NoEnergy")
                        .HasColumnType("integer");

                    b.Property<int?>("NoInterest")
                        .HasColumnType("integer");

                    b.Property<int?>("Sleeping")
                        .HasColumnType("integer");

                    b.Property<int?>("Slowly")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_depression_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserDissociativeSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DifferentPeople")
                        .HasColumnType("integer");

                    b.Property<int?>("EasyWhenHard")
                        .HasColumnType("integer");

                    b.Property<int?>("IgnorePain")
                        .HasColumnType("integer");

                    b.Property<int?>("NoMemory")
                        .HasColumnType("integer");

                    b.Property<int?>("Nothing")
                        .HasColumnType("integer");

                    b.Property<int?>("TalkOutLoud")
                        .HasColumnType("integer");

                    b.Property<int?>("Unclear")
                        .HasColumnType("integer");

                    b.Property<int?>("Unreal")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_dissociative_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserEmotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_emotion", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserGeneralizedAnxietySeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Accidents")
                        .HasColumnType("integer");

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Fright")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Reassurance")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int?>("Time")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_generalized_anxiety_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_journal", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserMania", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Question1")
                        .HasColumnType("integer");

                    b.Property<int?>("Question2")
                        .HasColumnType("integer");

                    b.Property<int?>("Question3")
                        .HasColumnType("integer");

                    b.Property<int?>("Question4")
                        .HasColumnType("integer");

                    b.Property<int?>("Question5")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_mania", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_medicine", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserMood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Mood")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_mood", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserPanicSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DistractedMyself")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("LosingControl")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Preparing")
                        .HasColumnType("integer");

                    b.Property<int?>("SuddenTerror")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_panic_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserPeople", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_people", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserPostTraumaticStressSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Alert")
                        .HasColumnType("integer");

                    b.Property<int?>("Avoid")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Flashbacks")
                        .HasColumnType("integer");

                    b.Property<int?>("Irritable")
                        .HasColumnType("integer");

                    b.Property<int?>("NegativeEmotions")
                        .HasColumnType("integer");

                    b.Property<int?>("NoInterest")
                        .HasColumnType("integer");

                    b.Property<int?>("Startled")
                        .HasColumnType("integer");

                    b.Property<int?>("StressfulEvent")
                        .HasColumnType("integer");

                    b.Property<int?>("Upset")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_posttraumatic_stress_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserSleep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("SleepDuration")
                        .HasColumnType("integer");

                    b.Property<int>("SleepTime")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_sleep", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserSocialAnxietySeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Avoided")
                        .HasColumnType("integer");

                    b.Property<int?>("Cope")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DistractedMyself")
                        .HasColumnType("integer");

                    b.Property<int?>("Fright")
                        .HasColumnType("integer");

                    b.Property<int?>("Heart")
                        .HasColumnType("integer");

                    b.Property<int?>("Humiliated")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftEarly")
                        .HasColumnType("integer");

                    b.Property<int?>("Nervous")
                        .HasColumnType("integer");

                    b.Property<int?>("Preparing")
                        .HasColumnType("integer");

                    b.Property<int?>("Tense")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_social_anxiety_severity", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_symptom", t =>
                        {
                            t.HasComment("User variation weight log");
                        });
                });

            modelBuilder.Entity("Data.Entities.User.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Token");

                    b.ToTable("user_token", t =>
                        {
                            t.HasComment("Auth tokens for a user");
                        });
                });

            modelBuilder.Entity("UserActivityUserCustom", b =>
                {
                    b.Property<int>("UserActivitiesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.HasKey("UserActivitiesId", "UserCustomsId");

                    b.HasIndex("UserCustomsId");

                    b.ToTable("UserActivityUserCustom");
                });

            modelBuilder.Entity("UserCustomUserEmotion", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserEmotionsId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserEmotionsId");

                    b.HasIndex("UserEmotionsId");

                    b.ToTable("UserCustomUserEmotion");
                });

            modelBuilder.Entity("UserCustomUserMedicine", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserMedicinesId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserMedicinesId");

                    b.HasIndex("UserMedicinesId");

                    b.ToTable("UserCustomUserMedicine");
                });

            modelBuilder.Entity("UserCustomUserPeople", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserPeoplesId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserPeoplesId");

                    b.HasIndex("UserPeoplesId");

                    b.ToTable("UserCustomUserPeople");
                });

            modelBuilder.Entity("UserCustomUserSleep", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserSleepsId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserSleepsId");

                    b.HasIndex("UserSleepsId");

                    b.ToTable("UserCustomUserSleep");
                });

            modelBuilder.Entity("UserCustomUserSymptom", b =>
                {
                    b.Property<int>("UserCustomsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserSymptomsId")
                        .HasColumnType("integer");

                    b.HasKey("UserCustomsId", "UserSymptomsId");

                    b.HasIndex("UserSymptomsId");

                    b.ToTable("UserCustomUserSymptom");
                });

            modelBuilder.Entity("Data.Entities.Footnote.UserCustom", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserCustoms")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Footnote.UserFootnote", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserFootnotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiaryTask", b =>
                {
                    b.HasOne("Data.Entities.Newsletter.UserDiary", "UserDiary")
                        .WithMany("UserDiaryTasks")
                        .HasForeignKey("UserDiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Task.UserTask", "UserTask")
                        .WithMany("UserDiaryTasks")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDiary");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserEmail", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTask", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTaskLog", b =>
                {
                    b.HasOne("Data.Entities.Task.UserTask", "UserTask")
                        .WithMany("UserTaskLogs")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.Entities.User.UserActivity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAcuteStressSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAcuteStressSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAgoraphobiaSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAgoraphobiaSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAnger", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAngers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserAnxiety", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserAnxieties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserCompleteMetabolicPanel", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserCompleteMetabolicPanels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserComponent", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserComponents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDepression", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDepressions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDepressionSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDepressionSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserDissociativeSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserDissociativeSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserEmotion", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserEmotions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserGeneralizedAnxietySeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserGeneralizedAnxietySeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserJournal", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserJournals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserMania", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserManias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserMedicine", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserMedicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserMood", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserMoods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserPanicSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserPanicSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserPeople", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserPeoples")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserPostTraumaticStressSeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserPostTraumaticStressSeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSleep", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSleeps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSocialAnxietySeverity", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSocialAnxietySeverities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserSymptom", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserSymptoms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User.UserToken", b =>
                {
                    b.HasOne("Data.Entities.User.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserActivityUserCustom", b =>
                {
                    b.HasOne("Data.Entities.User.UserActivity", null)
                        .WithMany()
                        .HasForeignKey("UserActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Footnote.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserEmotion", b =>
                {
                    b.HasOne("Data.Entities.Footnote.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserEmotion", null)
                        .WithMany()
                        .HasForeignKey("UserEmotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserMedicine", b =>
                {
                    b.HasOne("Data.Entities.Footnote.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserMedicine", null)
                        .WithMany()
                        .HasForeignKey("UserMedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserPeople", b =>
                {
                    b.HasOne("Data.Entities.Footnote.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserPeople", null)
                        .WithMany()
                        .HasForeignKey("UserPeoplesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserSleep", b =>
                {
                    b.HasOne("Data.Entities.Footnote.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserSleep", null)
                        .WithMany()
                        .HasForeignKey("UserSleepsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCustomUserSymptom", b =>
                {
                    b.HasOne("Data.Entities.Footnote.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserCustomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User.UserSymptom", null)
                        .WithMany()
                        .HasForeignKey("UserSymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Newsletter.UserDiary", b =>
                {
                    b.Navigation("UserDiaryTasks");
                });

            modelBuilder.Entity("Data.Entities.Task.UserTask", b =>
                {
                    b.Navigation("UserDiaryTasks");

                    b.Navigation("UserTaskLogs");
                });

            modelBuilder.Entity("Data.Entities.User.User", b =>
                {
                    b.Navigation("UserActivities");

                    b.Navigation("UserAcuteStressSeverities");

                    b.Navigation("UserAgoraphobiaSeverities");

                    b.Navigation("UserAngers");

                    b.Navigation("UserAnxieties");

                    b.Navigation("UserCompleteMetabolicPanels");

                    b.Navigation("UserComponents");

                    b.Navigation("UserCustoms");

                    b.Navigation("UserDepressionSeverities");

                    b.Navigation("UserDepressions");

                    b.Navigation("UserDissociativeSeverities");

                    b.Navigation("UserEmails");

                    b.Navigation("UserEmotions");

                    b.Navigation("UserFootnotes");

                    b.Navigation("UserGeneralizedAnxietySeverities");

                    b.Navigation("UserJournals");

                    b.Navigation("UserManias");

                    b.Navigation("UserMedicines");

                    b.Navigation("UserMoods");

                    b.Navigation("UserPanicSeverities");

                    b.Navigation("UserPeoples");

                    b.Navigation("UserPostTraumaticStressSeverities");

                    b.Navigation("UserSleeps");

                    b.Navigation("UserSocialAnxietySeverities");

                    b.Navigation("UserSymptoms");

                    b.Navigation("UserTasks");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
