@model BloodWorkViewModel
@using Core.Models.Components
@using Data.Entities.User

@{
    bool show = Model.PreviousMood == null || Model.PreviousMood.Date < DateHelpers.Today.AddMonths(-1);
}

<div class="alert alert-secondary">
    <div class="row gy-2">
        @if (show)
        {
            <div class="col-lg-6">
                <h6 class="mb-1">Blood Work</h6>
                <div class="alert alert-light shadow">
                    <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.ManageBloodWork)" method="post"
                          asp-route-email="@Model.User.Email" asp-route-token="@Model.Token">

                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        @if (Model.SubComponents.HasFlag(Core.Models.Components.SubComponents.BloodWork.VitaminA))
                        {
                            <div class="mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.VitaminA)</label>
                                <div><span asp-validation-for="UserMood.VitaminA" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.VitaminA))" asp-for="UserMood.VitaminA" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.VitaminA))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.VitaminA))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.VitaminA))Input" list="hashmarks" value="@(Model.UserMood.VitaminA ?? -1)"
                                               min="@(UserBloodWork.Consts.VitaminAMin - UserBloodWork.Consts.VitaminAStep)" max="@UserBloodWork.Consts.VitaminAMax" step="@UserBloodWork.Consts.VitaminAStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.VitaminA)).value = this.valueAsNumber < @UserBloodWork.Consts.VitaminAMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="50"></option>
                                            <option value="75"></option>
                                            <option value="100"></option>
                                            <option value="125"></option>
                                            <option value="150"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.VitaminA))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.VitaminA)</div>
                            </div>
                        }

                        @if (Model.SubComponents.HasFlag(Core.Models.Components.SubComponents.BloodWork.Homocysteine))
                        {
                            <div class="mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.Homocysteine)</label>
                                <div><span asp-validation-for="UserMood.Homocysteine" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.Homocysteine))" asp-for="UserMood.Homocysteine" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.Homocysteine))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.Homocysteine))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.Homocysteine))Input" list="hashmarks" value="@(Model.UserMood.Homocysteine ?? -1)"
                                               min="@(UserBloodWork.Consts.HomocysteineMin - UserBloodWork.Consts.HomocysteineStep)" max="@UserBloodWork.Consts.HomocysteineMax" step="@UserBloodWork.Consts.HomocysteineStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.Homocysteine)).value = this.valueAsNumber < @UserBloodWork.Consts.HomocysteineMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="5"></option>
                                            <option value="10"></option>
                                            <option value="15"></option>
                                            <option value="20"></option>
                                            <option value="25"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.Homocysteine))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.Homocysteine)</div>
                            </div>
                        }

                        <div>
                            <input type="submit" value="Save" class="btn btn-primary allow-demo" />
                        </div>
                    </form>
                </div>
            </div>
        }

        <div class="col-lg-6">
            <h6 class="mb-1">Log</h6>
            <div class="alert alert-light shadow">
                @{ await Html.RenderPartialAsync("_LineChart", new LineChartViewModel()
                {
                    XysGrouped = Model.XysGrouped,
                    User = Model.User,
                    Token = Model.Token,
                    Type = Core.Models.Components.Component.BloodWork
                }); }
            </div>
        </div>
    </div>
</div>
