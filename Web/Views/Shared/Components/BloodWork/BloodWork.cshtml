@model BloodWorkViewModel
@using Core.Models.Components
@using Data.Entities.User
@using Lib.Pages.Shared.Exercise

@{
    bool show = Model.PreviousMood == null || Model.PreviousMood.Date < DateHelpers.Today.AddMonths(-1);
}

<h5 class="mb-1">Blood Work</h5>
<div class="alert alert-light shadow">
    @if (!show)
    {
        await Html.RenderPartialAsync("_LineChart", new LineChartViewModel()
        {
            XysGrouped = Model.XysGrouped,
            User = Model.User,
            Token = Model.Token,
            Type = Core.Models.Components.Component.BloodWork
        });
    }
    else
    {
        <details>
            <summary>
                @{
                    await Html.RenderPartialAsync("_LineChart", new LineChartViewModel()
                    {
                        XysGrouped = Model.XysGrouped,
                        User = Model.User,
                        Token = Model.Token,
                        Type = Core.Models.Components.Component.BloodWork
                    });
                }
            </summary>

            <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.ManageBloodWork)" method="post"
                    asp-route-email="@Model.User.Email" asp-route-token="@Model.Token">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                @if (Model.SubComponents.HasFlag(Core.Models.Components.SubComponents.BloodWork.VitaminA))
                {
                    <div class="form-group mb-3 mt-3">
                        <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.VitaminA)</label>
                        <div><span asp-validation-for="UserMood.VitaminA" class="text-danger"></span></div>
                        <div style="display:flex;column-gap:1ex;">
                            <input id="@(Html.IdFor(_ => Model.UserMood.VitaminA))" asp-for="UserMood.VitaminA" style="width:6ch;height:fit-content;" class="allow-demo"
                                   oninput="@(Html.IdFor(_ => Model.UserMood.VitaminA))Input.value = this.valueAsNumber" />
                            <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                <input type="range" style="width:100%;" class="allow-demo"
                                       name="@(Html.IdFor(_ => Model.UserMood.VitaminA))Input" list="hashmarks" id="@(Html.IdFor(_ => Model.UserMood.VitaminA))-input"
                                       min="-1" max="250" step="1" value="@(Model.UserMood.VitaminA ?? -1)"
                                       oninput="@(Html.IdFor(_ => Model.UserMood.VitaminA)).value = this.valueAsNumber < 0 ? '' : this.valueAsNumber" />

                                <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                    <option value=""></option>
                                    <option value="50"></option>
                                    <option value="75"></option>
                                    <option value="100"></option>
                                    <option value="125"></option>
                                    <option value="150"></option>
                                </datalist>
                            </div>
                        </div>
                        <div id="@(Html.IdFor(_ => Model.UserMood.VitaminA))-help" class="form-text"></div>
                    </div>
                }

                @if (Model.SubComponents.HasFlag(Core.Models.Components.SubComponents.BloodWork.Homocysteine))
                {
                    <div class="form-group mb-3 mt-3">
                        <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.Homocysteine)</label>
                        <div><span asp-validation-for="UserMood.Homocysteine" class="text-danger"></span></div>
                        <div style="display:flex;column-gap:1ex;">
                            <input id="@(Html.IdFor(_ => Model.UserMood.Homocysteine))" asp-for="UserMood.Homocysteine" style="width:6ch;height:fit-content;" class="allow-demo"
                                   oninput="@(Html.IdFor(_ => Model.UserMood.Homocysteine))Input.value = this.valueAsNumber" />
                            <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                <input type="range" style="width:100%;" class="allow-demo"
                                       name="@(Html.IdFor(_ => Model.UserMood.Homocysteine))Input" list="hashmarks" id="@(Html.IdFor(_ => Model.UserMood.Homocysteine))-input"
                                       min="-1" max="250" step="1" value="@(Model.UserMood.Homocysteine ?? -1)"
                                       oninput="@(Html.IdFor(_ => Model.UserMood.Homocysteine)).value = this.valueAsNumber < 0 ? '' : this.valueAsNumber" />

                                <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                    <option value=""></option>
                                    <option value="50"></option>
                                    <option value="75"></option>
                                    <option value="100"></option>
                                    <option value="125"></option>
                                    <option value="150"></option>
                                </datalist>
                            </div>
                        </div>
                        <div id="@(Html.IdFor(_ => Model.UserMood.Homocysteine))-help" class="form-text"></div>
                    </div>
                }

                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary allow-demo" />
                </div>
            </form>
        </details>
    }
</div>
