@model TaskLogViewModel
@using System.Numerics
@using Core.Models.Components
@using Core.Consts

<div class="alert alert-light shadow">
    <div style="height:min(70vw, 300px)">
        <canvas id="myChart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script type="module">
    const canvas = document.getElementById('myChart');
    if (canvas) {
        Chart.defaults.font.size = 16;
        const chart = new Chart(canvas, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Completions',
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'before',
                    data: @Json.Serialize(Model.Xys)
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                scales: {
                    y: {
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '0%',
                        title: {
                            // Display a label for the y-axis
                            display: false,
                            text: 'Complete',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: { display: false, },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return new Date(context[0].parsed.x).toDateString();
                            },
                        },
                    },
                    annotation: {
                        annotations: [{
                            type: 'line',
                            borderWidth: 1.5,
                            borderColor: 'orange',
                            yMin: @Model.Task.ReferenceMin.GetValueOrDefault(),
                            yMax: @Model.Task.ReferenceMin.GetValueOrDefault(),
                            display: @Json.Serialize(Model.Task.ReferenceMin.HasValue),
                        }, {
                            type: 'line',
                            borderWidth: 1.5,
                            borderColor: 'red',
                            yMin: @Model.Task.ReferenceMax.GetValueOrDefault(),
                            yMax: @Model.Task.ReferenceMax.GetValueOrDefault(),
                            display: @Json.Serialize(Model.Task.ReferenceMax.HasValue),
                        }]
                    },
                },
            }
        });

        @if (TempData.IsSuccess())
        {
            @:window.uploadChart(chart, 420, 180, '@Html.Raw(Model.User.Email)', '@Html.Raw(Model.Token)', '@Model.Type', '@Model.Name');
        }
    }
</script>

