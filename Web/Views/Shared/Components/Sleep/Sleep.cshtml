@model SleepViewModel
@using Core.Models.Components
@using Data.Entities.User
@using Lib.Pages.Shared.Exercise

<h5 class="mb-1">Sleep</h5>
<div class="alert alert-light shadow">
    @if (Model.UserMood.Date == DateHelpers.Today && Model.UserMood.Id != default)
    {
        <div style="height:min(70vw, 300px)">
            <canvas id="myChart1"></canvas>
        </div>
    }
    else
    {
    <details>
        <summary>
            <div style="height:min(70vw, 300px)">
                <canvas id="myChart1"></canvas>
            </div>
        </summary>

        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.ManageSleep)" method="post"
              asp-route-email="@Model.User.Email" asp-route-token="@Model.Token">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-5 pb-1">
                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.SleepDuration)</label>
                <div><span asp-validation-for="UserMood.SleepDuration" class="text-danger"></span></div>
                <div style="display:flex;column-gap:1ex;">
                    <input type="hidden" asp-for="UserMood.SleepDuration" value="@((int)Model.UserMood.SleepDuration)"
                           id="@(Html.IdFor(_ => Model.UserMood.SleepDuration))" style="width:6ch;height:fit-content;" class="allow-demo"
                           oninput="@(Html.IdFor(_ => Model.UserMood.SleepDuration))Input.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" class="allow-demo"
                               name="@(Html.IdFor(_ => Model.UserMood.SleepDuration))Input" list="hashmarks" id="@(Html.IdFor(_ => Model.UserMood.SleepDuration))-input"
                               min="1" max="3" step="1" value="@((int)Model.UserMood.SleepDuration)"
                               oninput="@(Html.IdFor(_ => Model.UserMood.SleepDuration)).value = this.valueAsNumber" />

                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>

                            <!-- These need to be separate from the <option> elements because those have their position attribute overriden (from absolute to static) on Firefox -->
                            <div onclick="@(Html.IdFor(_ => Model.UserMood.SleepDuration)).value = document.getElementById('@(Html.IdFor(_ => Model.UserMood.SleepDuration))-input').value = this.dataset.value" data-value="1" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(0% - .5ch)">@SleepDuration.TooLittle.GetSingleDisplayName()</div>
                            <div onclick="@(Html.IdFor(_ => Model.UserMood.SleepDuration)).value = document.getElementById('@(Html.IdFor(_ => Model.UserMood.SleepDuration))-input').value = this.dataset.value" data-value="2" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(50% - .5ch)">@SleepDuration.JustRight.GetSingleDisplayName()</div>
                            <div onclick="@(Html.IdFor(_ => Model.UserMood.SleepDuration)).value = document.getElementById('@(Html.IdFor(_ => Model.UserMood.SleepDuration))-input').value = this.dataset.value" data-value="3" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;right:-2.5ch">@SleepDuration.TooMuch.GetSingleDisplayName()</div>
                        </datalist>
                    </div>
                </div>
                <div id="pounds-help" class="form-text"></div>
            </div>

            <div class="form-group mb-5 pb-4">
                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.SleepTime)</label>
                <div><span asp-validation-for="UserMood.SleepTime" class="text-danger"></span></div>
                <div style="display:flex;column-gap:1ex;">
                    <input type="hidden" asp-for="UserMood.SleepTime" value="@((int)Model.UserMood.SleepTime)"
                           id="@(Html.IdFor(_ => Model.UserMood.SleepTime))" style="width:6ch;height:fit-content;" class="allow-demo"
                           oninput="@(Html.IdFor(_ => Model.UserMood.SleepTime))Input.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" class="allow-demo"
                               name="@(Html.IdFor(_ => Model.UserMood.SleepTime))Input" list="hashmarks" id="@(Html.IdFor(_ => Model.UserMood.SleepTime))-input"
                               min="1" max="3" step="1" value="@((int)Model.UserMood.SleepTime)"
                               oninput="@(Html.IdFor(_ => Model.UserMood.SleepTime)).value = this.valueAsNumber" />

                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>

                            <!-- These need to be separate from the <option> elements because those have their position attribute overriden (from absolute to static) on Firefox -->
                            <div onclick="@(Html.IdFor(_ => Model.UserMood.SleepTime)).value = document.getElementById('@(Html.IdFor(_ => Model.UserMood.SleepTime))-input').value = this.dataset.value" data-value="1" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(0% - .5ch)">@SleepTime.EarlyToBed.GetSingleDisplayName()</div>
                            <div onclick="@(Html.IdFor(_ => Model.UserMood.SleepTime)).value = document.getElementById('@(Html.IdFor(_ => Model.UserMood.SleepTime))-input').value = this.dataset.value" data-value="2" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(50% - .5ch)">@SleepTime.InBedOnTime.GetSingleDisplayName()</div>
                            <div onclick="@(Html.IdFor(_ => Model.UserMood.SleepTime)).value = document.getElementById('@(Html.IdFor(_ => Model.UserMood.SleepTime))-input').value = this.dataset.value" data-value="3" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;right:-2.5ch">@SleepTime.LateToBed.GetSingleDisplayName()</div>
                        </datalist>
                    </div>
                </div>
                <div id="pounds-help" class="form-text"></div>
            </div>

            <div class="form-group mb-3 mt-3">
                @for (var i = 0; i < Model.Customs.Count; i++)
                {
                    <div class="form-check">
                        <input class="allow-demo" type="hidden" asp-for="@Model.Customs[i].Id" />
                        <input class="allow-demo" type="hidden" asp-for="@Model.Customs[i].Name" />
                        <input id="@Html.IdFor(_ => Model.Customs[i].Selected)-sleep" asp-for="@Model.Customs[i].Selected" class="form-check-input allow-demo" type="checkbox">
                        <label for="@Html.IdFor(_ => Model.Customs[i].Selected)-sleep" class="form-check-label">
                            @Model.Customs[i].Name
                        </label>
                    </div>
                }
            </div>

            <div class="form-group mb-3">
                <input type="submit" value="Save" class="btn btn-primary allow-demo" />
            </div>
        </form>
    </details>
    }
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script type="module">
    const canvas = document.getElementById('myChart1');
    if (canvas) {
        var ctx = canvas.getContext('2d');

        // https://www.chartjs.org/docs/latest/samples/advanced/linear-gradient.html
        var gradient1 = ctx.createLinearGradient(0, 0, 0, 300);
        gradient1.addColorStop(0, 'currentColor');
        gradient1.addColorStop(.5, 'skyblue');
        gradient1.addColorStop(1, 'currentColor');

        var gradient2 = ctx.createLinearGradient(0, 0, 0, 300);
        gradient2.addColorStop(0, 'currentColor');
        gradient2.addColorStop(.5, 'red');
        gradient2.addColorStop(1, 'currentColor');

        Chart.defaults.font.size = 16;
        const chart = new Chart(canvas, {
            type: 'line',
            data: {
                datasets: [
                    {
                        type: 'line',
                        label: 'Sleep Duration',
                        data: @Json.Serialize(Model.SleepDurations),
                        fill: false,
                        yAxisID: 'y',
                        spanGaps: true,
                        showLine: true,
                        stepped: 'end',
                        borderColor: gradient1,
                        backgroundColor: 'skyblue',
                        parsing: {
                            yAxisKey: 'y'
                        },
                    }, {
                        type: 'line',
                        label: 'Sleep Time',
                        yAxisID: 'z',
                        data: @Json.Serialize(Model.SleepTimes),
                        fill: false,
                        spanGaps: true,
                        showLine: true,
                        stepped: 'end',
                        borderColor: gradient2,
                        backgroundColor: 'red',
                        parsing: {
                            yAxisKey: 'y'
                        },
                    },
                    @for (var i = 0; i < Model.XysGrouped.Count; i++)
                    {
                        var group = Model.XysGrouped[i];
                        <text>
                            {
                            type: 'bar',
                                label: '@group.Key.Name',
                                data: @Json.Serialize(group),
                                fill: false,
                                yAxisID: 'y',
                                spanGaps: true,
                                showLine: true,
                                borderColor: gradient1,
                                backgroundColor: 'skyblue',
                                parsing: {
                                    yAxisKey: 'y.one'
                                },
                            },
                        </text>
                    }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    line: {
                        
                    },
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                parsing: {
                    xAxisKey: 'x'
                },
                scales: {
                    z: {
                        min: 0,
                        type: 'linear',
                        position: 'right',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: true,
                            text: 'Sleep Time',
                            color: 'red',
                        },
                        ticks: {
                            color: 'red',
                            // No decimal places
                            precision: 0,
                            // Customize the y-axis tick name
                            callback: function (value, index, ticks) {
                                var enumMap = @(Json.Serialize(Enum.GetNames<SleepTime>()));
                                return '';// enumMap[value - 1];
                            }
                        },
                    },
                    y: {
                        min: 0,
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: true,
                            text: 'Sleep Duration',
                            color: 'skyblue',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                            // Customize the y-axis tick name
                            callback: function (value, index, ticks) {
                                var enumMap = @(Json.Serialize(Enum.GetNames<SleepDuration>()));
                                return '';// enumMap[value - 1];
                            }
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: {
                        display: true,
                    },
                    tooltip: {
                        callbacks: {
                            label: (context) => context.raw.extra,
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return new Date(context[0].parsed.x).toDateString();
                            },
                        },
                    },
                    /*
                    decimation: {
                        enabled: true,
                        algorithm: 'lttb',
                        samples: 12,
                    },
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                    },
                    */
                },
            }
        });

        window.uploadChart(chart, 350, 350, '@Html.Raw(Model.User.Email)', '@Html.Raw(Model.Token)', '@Components.Sleep');
    }
</script>
