@model UserEditViewModel
@using System.Numerics
@using Core.Models.Components
@using Core.Dtos.Newsletter
@using Core.Models.User
@using Core.Consts
@using Data.Models.Newsletter
@using Data.Entities.User
@using Web.Code.Extensions

<div id="edit" class="row gy-2">
    <div class="col-lg-6">
        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.Edit)" method="post"
              class="alert alert-light shadow">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Token" />
            <input type="hidden" asp-for="Email" />

            @if (!Model.User.IsDemoUser) 
            {
                <div class="form-group mb-3">
                    <label for="disabled-email" class="control-label">@Html.DisplayNameFor(_ => Model.Email)</label>
                    <input id="disabled-email" value="@Model.Email" class="form-control" disabled="disabled" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
            }
            
            <div class="form-group mb-3">
                <label asp-for="SendDaysBinder" class="control-label">@Html.DisplayNameFor(_ => Model.SendDays)</label>
                <select asp-for="SendDaysBinder" class="form-control overflow-auto" aria-describedby="rest-help" size="@BitOperations.PopCount((ulong)Days.All)"
                        asp-items="@(EnumExtensions.GetSingleValues<Days>().AsSelectListItems())">
                </select>
                <span asp-validation-for="SendDaysBinder" class="text-danger"></span>
                <div id="rest-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.SendDays)</div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="ComponentsBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Components)</label>
                <select asp-for="ComponentsBinder" class="form-control overflow-auto" aria-describedby="Components-help" size="5"
                        asp-items="@(EnumExtensions.GetDisplayValues<Core.Models.Components.Component>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Order))">
                </select>
                <span asp-validation-for="ComponentsBinder" class="text-danger"></span>
                <div id="Components-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Components)</div>
            </div>
            @if (Model.Components != Core.Models.Components.Component.None && Model.ComponentsBinder != null)
            {
                <div class="form-group mb-3">
                    <details class="mb-3" @(Model.WasUpdated == false ? "open='open'" : "")>
                        <summary><b>Edit @Html.DisplayNameFor(_ => Model.UserComponentSettings)</b></summary>

                        <div class="mt-1 ps-3">
                            @for (var i = 0; i < Model.UserComponentSettings.Count; i++)
                            {
                                <input type="hidden" asp-for="UserComponentSettings[i].UserId" />
                                <input type="hidden" asp-for="UserComponentSettings[i].Component" />
                                <div class="mb-3">
                                    <label asp-for="UserComponentSettings[i].Component" class="control-label mb-1"><b>@Model.UserComponentSettings[i].Component.GetDisplayName2()</b></label>

                                    @if (Model.UserComponentSettings[i].Component.GetSubComponent() == null)
                                    {
                                        <input type="hidden" asp-for="UserComponentSettings[i].SubComponentsBinder" value="0" />
                                    }
                                    else
                                    {
                                        <div class="mb-2">
                                            <label asp-for="UserComponentSettings[i].SubComponentsBinder" class="control-label">@Html.DisplayNameFor(_ => Model.UserComponentSettings[i].SubComponents)</label>
                                            <select asp-for="UserComponentSettings[i].SubComponentsBinder" class="form-control" aria-describedby="skills-help" size="5"
                                                    asp-items='@(Model.UserComponentSettings[i].Component.GetSubComponent()!.SelectList.AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))'>
                                            </select>
                                            <span asp-validation-for="UserComponentSettings[i].SubComponents" class="text-danger"></span>
                                            <div id="skills-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserComponentSettings[i].SubComponents)</div>
                                        </div>
                                    }
                                    <div class="mb-2" style="display:flex;column-gap:1ch;flex-wrap:wrap;">
                                        <div style="display:flex;margin-bottom:-.5ex;">@Html.DisplayNameFor(_ => Model.UserComponentSettings[i].Days)</div>
                                        <div style="display:flex;gap:1ch;align-items:center;flex:1 0 150px;">
                                            <input id="prehabMusclesOutput@(i)" type="number" asp-for="UserComponentSettings[i].Days" style="width:6ch;height:fit-content;"
                                                   oninput="prehabMusclesOutput@(i)Input.value = this.valueAsNumber" />
                                            <div style="display:flex;width:100%;">
                                                <input id="prehabMusclesOutput@(i)Input" asp-for="UserComponentSettings[i].Days" type="range" style="width:100%;"
                                                       min="@UserConsts.ChartDaysMin" max="@UserConsts.ChartDaysMax" step="1" aria-describedby="component-days-help"
                                                       oninput="prehabMusclesOutput@(i).value = this.valueAsNumber" />
                                            </div>
                                        </div>
                                        <span asp-validation-for="UserComponentSettings[i]" class="text-danger"></span>
                                        <div id="component-days-help" class="form-text">
                                            <p>@Html.DisplayDescriptionFor(_ => Model.UserComponentSettings[i])</p>
                                        </div>
                                    </div>
                                </div>
                            }

                            <span asp-validation-for="UserComponentSettings" class="text-danger"></span>
                        </div>
                    </details>
                </div>
            }

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Optional health and fitness tips.
                </div>
            }

            <div class="form-group mb-3">
                <label asp-for="FootnoteTypeBinder" class="control-label">@Html.DisplayNameFor(_ => Model.FootnoteType)</label>
                <select asp-for="FootnoteTypeBinder" class="form-control overflow-auto" aria-describedby="footnote-help" size="5"
                        asp-items='@(EnumExtensions.GetSingleValues<FootnoteType>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))'>
                </select>
                <span asp-validation-for="FootnoteTypeBinder" class="text-danger"></span>
                <div id="footnote-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.FootnoteType)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="VerbosityBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Verbosity)</label>
                <select asp-for="VerbosityBinder" class="form-control overflow-auto" aria-describedby="verbosity-help" size="2"
                        asp-items="@(EnumExtensions.GetDisplayValues<Verbosity>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))">
                </select>
                <span asp-validation-for="VerbosityBinder" class="text-danger"></span>
                <div id="verbosity-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Verbosity)</div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="SendHour" class="control-label">@Html.DisplayNameFor(_ => Model.SendHour)</label>
                <select asp-for="SendHour" class="form-control" aria-describedby="time-help"
                        asp-items="@(Enumerable.Range(0, 24).Select(h => new SelectListItem() { Text = $"{h}", Value = $"{h}" }))">
                </select>
                <span asp-validation-for="SendHour" class="text-danger"></span>
                <details id="time-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.SendHour)</summary>

                    <div class="mt-1">
                        <span>Your timezone is <span id="utc-offset"></span> hours <span id="behind-ahead"></span> UTC.</span>
                    </div>
                    <script defer="defer">
                        const utcOffset = new Date().getTimezoneOffset() / -60;
                        document.getElementById('utc-offset').innerText = Math.abs(utcOffset);
                        document.getElementById('behind-ahead').innerText = utcOffset < 0 ? "behind" : "ahead of";
                    </script>
                </details>
            </div>

            <div class="form-group form-check mb-3">
                <label asp-for="NewsletterEnabled" class="control-label">@Html.DisplayNameFor(_ => Model.NewsletterEnabled)</label>
                <input class="form-check-input" asp-for="NewsletterEnabled" aria-describedby="disabled-help" />
                <span asp-validation-for="NewsletterEnabled" class="text-danger"></span>
                <div id="disabled-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.NewsletterEnabled)
                    @if (!String.IsNullOrWhiteSpace(Model.NewsletterDisabledReason))
                    {
                        <div><b>Disabled Reason</b> - @Model.NewsletterDisabledReason</div>
                    }
                </div>
            </div>

            <div class="row form-group">
                <div class="col">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
                <div class="col-auto">
                    <a class="btn btn-link text-muted hover" href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.Email, Model.Token })">Delete Account</a>
                </div>
            </div>
        </form>

        @await Component.InvokeAsync(AdvancedViewComponent.Name, new { Model.User, Model.Token })

        <details class="mb-25">
            <summary class="mb-1 h5">New Task</summary>

            @await Component.InvokeAsync(ManageTaskViewComponent.Name, new { Model.User })
        </details>
    </div>

    <div id="info" class="col">
        @await Component.InvokeAsync(ConfirmationViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(DeletionViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(UnsupportedClientViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(NewsletterViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(NextNewsletterViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(PastNewslettersViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(LinkFeastsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(GeneticsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(MicrobiomeViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(TokenViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(BackupRestoreViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(CustomViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(FootnoteViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(TasksViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(IgnoredTasksViewComponent.Name, new { Model.User, Model.Token })
    </div>
</div>