@model SalivaStressViewModel
@using Core.Models.Components
@using Data.Entities.User

@{
    bool show = Model.PreviousMood == null || Model.PreviousMood.Date < DateHelpers.Today.AddMonths(-1);
}

<div class="alert alert-secondary">
    <div class="row gy-2">
        @if (show)
        {
            <div class="col-lg-6">
                <h6 class="mb-1">Saliva Stress</h6>
                <div class="alert alert-light shadow">
                    <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.ManageSalivaStress)" method="post"
                          asp-route-email="@Model.User.Email" asp-route-token="@Model.Token">

                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        @if (true)
                        {
                            <div class="form-group mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.MorningCortisol)</label>
                                <div><span asp-validation-for="UserMood.MorningCortisol" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.MorningCortisol))" asp-for="UserMood.MorningCortisol" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.MorningCortisol))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.MorningCortisol))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.MorningCortisol))Input" list="hashmarks" value="@(Model.UserMood.MorningCortisol ?? -1)"
                                               min="@(UserSalivaStress.Consts.CortisolMin - UserSalivaStress.Consts.CortisolStep)" max="@UserSalivaStress.Consts.CortisolMax" step="@UserSalivaStress.Consts.CortisolStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.MorningCortisol)).value = this.valueAsNumber < @UserSalivaStress.Consts.CortisolMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="1"></option>
                                            <option value="2"></option>
                                            <option value="3"></option>
                                            <option value="5"></option>
                                            <option value="10"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.MorningCortisol))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.MorningCortisol)</div>
                            </div>
                        }

                        @if (true)
                        {
                            <div class="form-group mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.DaytimeCortisol)</label>
                                <div><span asp-validation-for="UserMood.DaytimeCortisol" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.DaytimeCortisol))" asp-for="UserMood.DaytimeCortisol" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.DaytimeCortisol))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.DaytimeCortisol))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.DaytimeCortisol))Input" list="hashmarks" value="@(Model.UserMood.DaytimeCortisol ?? -1)"
                                               min="@(UserSalivaStress.Consts.CortisolMin - UserSalivaStress.Consts.CortisolStep)" max="@UserSalivaStress.Consts.CortisolMax" step="@UserSalivaStress.Consts.CortisolStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.DaytimeCortisol)).value = this.valueAsNumber < @UserSalivaStress.Consts.CortisolMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="1"></option>
                                            <option value="2"></option>
                                            <option value="3"></option>
                                            <option value="5"></option>
                                            <option value="10"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.DaytimeCortisol))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.DaytimeCortisol)</div>
                            </div>
                        }

                        @if (true)
                        {
                            <div class="form-group mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.EveningCortisol)</label>
                                <div><span asp-validation-for="UserMood.EveningCortisol" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.EveningCortisol))" asp-for="UserMood.EveningCortisol" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.EveningCortisol))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.EveningCortisol))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.EveningCortisol))Input" list="hashmarks" value="@(Model.UserMood.EveningCortisol ?? -1)"
                                               min="@(UserSalivaStress.Consts.CortisolMin - UserSalivaStress.Consts.CortisolStep)" max="@UserSalivaStress.Consts.CortisolMax" step="@UserSalivaStress.Consts.CortisolStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.EveningCortisol)).value = this.valueAsNumber < @UserSalivaStress.Consts.CortisolMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="1"></option>
                                            <option value="2"></option>
                                            <option value="3"></option>
                                            <option value="5"></option>
                                            <option value="10"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.EveningCortisol))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.EveningCortisol)</div>
                            </div>
                        }

                        @if (true)
                        {
                            <div class="form-group mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.NightCortisol)</label>
                                <div><span asp-validation-for="UserMood.NightCortisol" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.NightCortisol))" asp-for="UserMood.NightCortisol" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.NightCortisol))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.NightCortisol))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.NightCortisol))Input" list="hashmarks" value="@(Model.UserMood.NightCortisol ?? -1)"
                                               min="@(UserSalivaStress.Consts.CortisolMin - UserSalivaStress.Consts.CortisolStep)" max="@UserSalivaStress.Consts.CortisolMax" step="@UserSalivaStress.Consts.CortisolStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.NightCortisol)).value = this.valueAsNumber < @UserSalivaStress.Consts.CortisolMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="1"></option>
                                            <option value="2"></option>
                                            <option value="3"></option>
                                            <option value="5"></option>
                                            <option value="10"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.NightCortisol))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.NightCortisol)</div>
                            </div>
                        }

                        @if (true)
                        {
                            <div class="form-group mb-3 mt-3">
                                <label class="control-label">@Html.DisplayNameFor(_ => Model.UserMood.DHEA)</label>
                                <div><span asp-validation-for="UserMood.DHEA" class="text-danger"></span></div>
                                <div style="display:flex;column-gap:1ex;">
                                    <input id="@(Html.IdFor(_ => Model.UserMood.DHEA))" asp-for="UserMood.DHEA" style="width:6ch;height:fit-content;" class="allow-demo"
                                           oninput="@(Html.IdFor(_ => Model.UserMood.DHEA))Input.value = this.valueAsNumber" />
                                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                        <input id="@(Html.IdFor(_ => Model.UserMood.DHEA))-input" class="allow-demo" style="width:100%;" type="range"
                                               name="@(Html.IdFor(_ => Model.UserMood.DHEA))Input" list="hashmarks" value="@(Model.UserMood.DHEA ?? -1)"
                                               min="@(UserSalivaStress.Consts.DHEAMin - UserSalivaStress.Consts.DHEAStep)" max="@UserSalivaStress.Consts.DHEAMax" step="@UserSalivaStress.Consts.DHEAStep"
                                               oninput="@(Html.IdFor(_ => Model.UserMood.DHEA)).value = this.valueAsNumber < @UserSalivaStress.Consts.DHEAMin ? '' : this.valueAsNumber" />

                                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                            <option value=""></option>
                                            <option value="50"></option>
                                            <option value="175"></option>
                                            <option value="300"></option>
                                            <option value="425"></option>
                                            <option value="550"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <div id="@(Html.IdFor(_ => Model.UserMood.DHEA))-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserMood.DHEA)</div>
                            </div>
                        }

                        <div class="form-group">
                            <input type="submit" value="Save" class="btn btn-primary allow-demo" />
                        </div>
                    </form>
                </div>
            </div>
        }

        <div class="col-lg-6">
            <h6 class="mb-1">Log</h6>
            <div class="alert alert-light shadow">
                @{ await Html.RenderPartialAsync("_LineChart", new LineChartViewModel()
                {
                    XysGrouped = Model.XysGrouped,
                    User = Model.User,
                    Token = Model.Token,
                    Type = Core.Models.Components.Component.SalivaStress
                }); }
            </div>
        </div>
    </div>
</div>
