@model Views.Shared.Components.ManageRecipe.ManageTaskViewModel
@using System.Numerics
@using Core.Consts

<div class="alert alert-light shadow">
    @if (Model.UserTask.Id != default)
    {
        <form asp-controller="@UserController.Name" class="row mb-3" asp-action="@nameof(UserController.RefreshRecipe)" method="post"
              asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" asp-route-taskId="@Model.UserTask.Id">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label for="exercise-date" class="control-label">@Html.DisplayNameFor(_ => Model.UserTask)</label>
                <div class="input-group">
                    <input type="text" id="exercise-date" class="form-control" disabled="disabled" aria-describedby="exercise-date-help" rows="1" value="@((Model.UserTask.RefreshAfter ?? Model.UserTask.LastSeen).ToString("O"))" />
                    <input type="submit" value="Refresh" class="btn btn-outline-secondary allow-demo" />
                </div>

                <span asp-validation-for="UserTask" class="text-danger"></span>
                <div id="exercise-date-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.UserTask)
                </div>
            </div>
        </form>
    }

    <form id="task-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.UpsertTask)" method="post" class="mb-3"
          asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" asp-route-taskId="@Model.UserTask.Id">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label for="Name" class="control-label">@Html.DisplayNameFor(_ => Model.Name)</label>
            <input type="text" asp-for="Name" class="form-control" aria-describedby="exercise-notes-help" rows="1" value="@Model.Name" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3 mt-3">
            <label for="Notes" class="control-label">@Html.DisplayNameFor(_ => Model.Notes)</label>
            <input type="text" asp-for="Notes" class="form-control" aria-describedby="exercise-notes-help" rows="1" value="@Model.Notes" />
            <span asp-validation-for="Notes" class="text-danger"></span>
        </div>

        @if (Model.User.IsDemoUser)
        {
            <div class="alert alert-info callout">
                Customize how long you want to see tasks before they refresh.
            </div>
        }

        <div class="form-group mb-3 mt-3">
            <label asp-for="LagRefreshXDays" class="control-label">@Html.DisplayNameFor(_ => Model.LagRefreshXDays)</label>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.LagRefreshXDays))" type="number" asp-for="LagRefreshXDays" style="width:6ch;height:fit-content;" class=""
                       oninput="@Html.IdFor(_ => Model.LagRefreshXDays)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;" class=""
                           name="@Html.IdFor(_ => Model.LagRefreshXDays)Input" id="@Html.IdFor(_ => Model.LagRefreshXDays)-input"
                           min="@UserConsts.LagRefreshXDaysMin" max="@UserConsts.LagRefreshXDaysMax" step="1" value="@Model.LagRefreshXDays"
                           oninput="@(Html.IdFor(_ => Model.LagRefreshXDays)).value = this.valueAsNumber" />
                </div>
            </div>
            <span asp-validation-for="LagRefreshXDays" class="text-danger"></span>
            <details id="refresh-functional-help" class="form-text">
                <summary>@Html.DisplayDescriptionFor(_ => Model.LagRefreshXDays)</summary>

                <div class="mt-1">
                    <span>The Weekly Nutritional Targets feature takes precedence over this.</span>
                </div>
            </details>
        </div>

        <div class="form-group mb-3 mt-3">
            <label asp-for="PadRefreshXDays" class="control-label">@Html.DisplayNameFor(_ => Model.PadRefreshXDays)</label>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.PadRefreshXDays))" type="number" asp-for="PadRefreshXDays" style="width:6ch;height:fit-content;" class=""
                       oninput="@Html.IdFor(_ => Model.PadRefreshXDays)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;" class=""
                           name="@Html.IdFor(_ => Model.PadRefreshXDays)Input" id="@Html.IdFor(_ => Model.PadRefreshXDays)-input"
                           min="@UserConsts.PadRefreshXDaysMin" max="@UserConsts.PadRefreshXDaysMax" step="1" value="@Model.PadRefreshXDays"
                           oninput="@(Html.IdFor(_ => Model.PadRefreshXDays)).value = this.valueAsNumber" />
                </div>
            </div>
            <span asp-validation-for="PadRefreshXDays" class="text-danger"></span>
            <details id="delay-functional-help" class="form-text">
                <summary>@Html.DisplayDescriptionFor(_ => Model.PadRefreshXDays)</summary>

                <div class="mt-1">
                    <span>This may not apply if there are no other recipes available.</span>
                </div>
            </details>
        </div>

        <div class="form-group mb-3">
            <label asp-for="SectionBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Section)</label>
            <select asp-for="SectionBinder" class="form-control overflow-auto" aria-describedby="verbosity-help" size="5"
                    asp-items="@(EnumExtensions.GetValuesExcluding32(Section.None, Section.All).AsSelectListItems32(EnumViewExtensions.EnumOrdering.Order))">
            </select>
            <span asp-validation-for="SectionBinder" class="text-danger"></span>
            <div id="verbosity-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Section)</div>
        </div>

        <div class="form-group form-check mb-3">
            <label asp-for="UserTask.Enabled" class="control-label">@Html.DisplayNameFor(_ => Model.UserTask.Enabled)</label>
            <input class="form-check-input" asp-for="UserTask.Enabled" aria-describedby="disabled-help" />
            <span asp-validation-for="UserTask.Enabled" class="text-danger"></span>
            <div id="disabled-help" class="form-text">
                @Html.DisplayDescriptionFor(_ => Model.UserTask.Enabled)
                @if (!String.IsNullOrWhiteSpace(Model.UserTask.DisabledReason))
                {
                    <div><b>Disabled Reason</b> - @Model.UserTask.DisabledReason</div>
                }
            </div>
        </div>
    </form>

    <div class="row form-group justify-content-end gy-2 mb-4">
        <div class="col">
            <input type="submit" value="Save" class="btn btn-primary" form="task-form" />
        </div>
        @if (Model.UserTask.Id != default)
        {
            <div class="col-auto">
                <form id="delete-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.RemoveTask)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" name="TaskId" asp-for="@Model.UserTask.Id" />

                    <input type="submit" value="Delete" class="btn btn-outline-danger" form="delete-form" />
                </form>
            </div>
        }
    </div>

    @if (Model.Task != null)
    {
        <component type="typeof(Microsoft.AspNetCore.Components.CascadingValue<Core.Dtos.User.UserNewsletterDto?>)" render-mode="Static" param-Value="null">
            <component type="typeof(Lib.Pages.Shared.Exercise._Task)" render-mode="Static" param-Model='Model.Task' param-Verbosity="Model.RecipeVerbosity" />
        </component>
    }
</div>
