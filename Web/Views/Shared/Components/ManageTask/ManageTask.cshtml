@model ManageTaskViewModel
@using System.Numerics
@using Core.Consts
@using Web.Components.UserTask
@using Data.Entities.Task

<div class="alert alert-light shadow">
    @if (Model.UserTask.Id != default)
    {
        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.CompleteTask)" method="post"
              asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" asp-route-section="@Model.ManageSection" asp-route-taskId="@Model.UserTask.Id">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @if (Model.UserTask.Type == UserTaskType.Log) 
            {
                <div class="mb-3">
                    <label asp-for="Value" class="control-label">@Html.DisplayNameFor(_ => Model.Value)</label>
                    <div style="display:flex;column-gap:1ex;">
                        <input id="@(Html.IdFor(_ => Model.Value))" type="number" asp-for="Value" style="width:6ch;height:fit-content;"
                               oninput="@Html.IdFor(_ => Model.Value)Input.value = this.valueAsNumber" />
                        <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                            <input type="range" style="width:100%;" aria-describedby="value-help"
                                   name="@Html.IdFor(_ => Model.Value)Input" id="@Html.IdFor(_ => Model.Value)-input"
                                   min="0" max="100" step="1" value="@Model.Value"
                                   oninput="@(Html.IdFor(_ => Model.Value)).value = this.valueAsNumber" />
                        </div>
                    </div>
                    <span asp-validation-for="Value" class="text-danger"></span>
                    <div id="value-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Value)</div>
                </div>
            }

            <div class="mb-3">
                <label for="task-name" class="control-label">@Html.DisplayNameFor(_ => Model.Name)</label>
                <div class="input-group">
                    <textarea id="task-name" class="form-control" aria-describedby="name-help" rows="1"
                              oninput="document.getElementById('@(Html.IdFor(_ => Model.UserTask.Name))').value = this.value">@Model.UserTask.Name</textarea>
                    <input type="submit" value="@(Model.CompletedForSection ? "Completed" : "Complete")" class="btn btn-outline-secondary @(Model.CompletedForSection ? "" : "allow-demo")" />
                </div>
                <span asp-validation-for="Name" class="text-danger"></span>
                @if (Model.UserTask.LastCompleted.HasValue) 
                {
                    <div id="name-help" class="form-text">Last Completed: @Model.UserTask.LastCompleted?.ToShortDateString()</div>
                }
            </div>
        </form>

        <form asp-controller="@UserController.Name" class="row mb-3" asp-action="@nameof(UserController.RefreshTask)" method="post"
              asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" asp-route-section="@Model.ManageSection" asp-route-taskId="@Model.UserTask.Id">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div>
                <label for="task-date" class="control-label">@Html.DisplayNameFor(_ => Model.UserTask)</label>
                <div class="input-group">
                    <input type="text" id="task-date" class="form-control" disabled="disabled" aria-describedby="date-help" rows="1" 
                           value="@((Model.UserTask.RefreshAfter ?? Model.UserTask.LastSeen ?? DateHelpers.Today).ToString("O"))" />
                    <input type="submit" value="Refresh" class="btn btn-outline-secondary allow-demo" />
                </div>
                <span asp-validation-for="UserTask" class="text-danger"></span>
                <div id="date-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserTask)</div>
            </div>
        </form>
    }

    <form id="task-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.UpsertTask)" method="post" class="mb-3"
          asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" asp-route-section="@Model.ManageSection" asp-route-taskId="@Model.UserTask.Id">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        @if (Model.UserTask.Id == default)
        {
            <div class="mb-3">
                <label asp-for="Name" class="control-label">@Html.DisplayNameFor(_ => Model.Name)</label>
                <input asp-for="Name" type="text" class="form-control" aria-describedby="name-help" rows="1" value="@Model.Name" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
        }
        else
        {
            <input type="hidden" name="Name" asp-for="@Model.UserTask.Name" />
        }

        <div class="mb-3 mt-3">
            <label asp-for="Notes" class="control-label">@Html.DisplayNameFor(_ => Model.Notes)</label>
            <input asp-for="Notes" type="text" class="form-control" aria-describedby="notes-help" rows="1" value="@Model.Notes" />
            <span asp-validation-for="Notes" class="text-danger"></span>
        </div>

        <div class="mb-3 mt-3">
            <label asp-for="Source" class="control-label">@Html.DisplayNameFor(_ => Model.Source)</label>
            <input asp-for="Source" type="text" class="form-control" aria-describedby="internal-notes-help" rows="1" value="@Model.Source" />
            <span asp-validation-for="Source" class="text-danger"></span>
        </div>

        <div class="mb-3 row">
            <div class="col">
                <label asp-for="Type" class="control-label">@Html.DisplayNameFor(_ => Model.Type)</label>
                <select asp-for="Type" class="form-control overflow-auto" aria-describedby="type-help"
                        asp-items="@(EnumExtensions.GetDisplayValues<UserTaskType>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Order))">
                </select>
                <span asp-validation-for="Type" class="text-danger"></span>
                <div id="type-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Type)</div>
            </div>
            <div class="col">
                <label asp-for="Order" class="control-label">@Html.DisplayNameFor(_ => Model.Order)</label>
                <input asp-for="Order" type="number" class="form-control" aria-describedby="order-help"
                       min="@UserTask.Consts.OrderMin" max="@UserTask.Consts.OrderMax" />
                <span asp-validation-for="Order" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <label asp-for="SectionBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Section)</label>
            <select asp-for="SectionBinder" class="form-control overflow-auto" aria-describedby="section-help" size="5"
                    asp-items="@(EnumExtensions.GetValuesExcluding(Section.Anytime, Section.All).AsSelectListItems(EnumViewExtensions.EnumOrdering.Order))">
            </select>
            <span asp-validation-for="SectionBinder" class="text-danger"></span>
            <div id="section-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Section)</div>
        </div>

        @if (Model.User.IsDemoUser)
        {
            <div class="alert alert-info callout">
                Customize how long you want to see tasks before they refresh.
            </div>
        }

        <div class="mb-3 mt-3">
            <label asp-for="LagRefreshXDays" class="control-label">@Html.DisplayNameFor(_ => Model.LagRefreshXDays)</label>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.LagRefreshXDays))" type="number" asp-for="LagRefreshXDays" style="width:6ch;height:fit-content;"
                       oninput="@Html.IdFor(_ => Model.LagRefreshXDays)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;" aria-describedby="lag-refresh-help"
                           name="@Html.IdFor(_ => Model.LagRefreshXDays)Input" id="@Html.IdFor(_ => Model.LagRefreshXDays)-input"
                           min="@UserConsts.LagRefreshXDaysMin" max="@UserConsts.LagRefreshXDaysMax" step="1" value="@Model.LagRefreshXDays"
                           oninput="@(Html.IdFor(_ => Model.LagRefreshXDays)).value = this.valueAsNumber" />
                </div>
            </div>
            <span asp-validation-for="LagRefreshXDays" class="text-danger"></span>
            <div id="lag-refresh-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.LagRefreshXDays)</div>
        </div>

        <div class="mb-3 mt-3">
            <label asp-for="PadRefreshXDays" class="control-label">@Html.DisplayNameFor(_ => Model.PadRefreshXDays)</label>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.PadRefreshXDays))" type="number" asp-for="PadRefreshXDays" style="width:6ch;height:fit-content;"
                       oninput="@Html.IdFor(_ => Model.PadRefreshXDays)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;" aria-describedby="pad-refresh-help"
                           name="@Html.IdFor(_ => Model.PadRefreshXDays)Input" id="@Html.IdFor(_ => Model.PadRefreshXDays)-input"
                           min="@UserConsts.PadRefreshXDaysMin" max="@UserConsts.PadRefreshXDaysMax" step="1" value="@Model.PadRefreshXDays"
                           oninput="@(Html.IdFor(_ => Model.PadRefreshXDays)).value = this.valueAsNumber" />
                </div>
            </div>
            <span asp-validation-for="PadRefreshXDays" class="text-danger"></span>
            <div id="pad-refresh-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.PadRefreshXDays)</div>
        </div>

        <div class="mb-3 mt-3">
            <label asp-for="DeloadAfterXWeeks" class="control-label">@Html.DisplayNameFor(_ => Model.DeloadAfterXWeeks)</label>
            <div style="display:flex;column-gap:1ex;">
                <input id="@(Html.IdFor(_ => Model.DeloadAfterXWeeks))" type="number" asp-for="DeloadAfterXWeeks" style="width:6ch;height:fit-content;"
                       oninput="@Html.IdFor(_ => Model.DeloadAfterXWeeks)Input.value = this.valueAsNumber" />
                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                    <input type="range" style="width:100%;" aria-describedby="deload-after-help"
                           name="@Html.IdFor(_ => Model.DeloadAfterXWeeks)Input" id="@Html.IdFor(_ => Model.DeloadAfterXWeeks)-input"
                           min="@UserConsts.DeloadWeeksMin" max="@UserConsts.DeloadWeeksMax" step="1" value="@Model.DeloadAfterXWeeks"
                           oninput="@(Html.IdFor(_ => Model.DeloadAfterXWeeks)).value = this.valueAsNumber" />
                </div>
            </div>
            <span asp-validation-for="DeloadAfterXWeeks" class="text-danger"></span>
            <div id="deload-after-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.DeloadAfterXWeeks)</div>
        </div>

        @if (Model.DeloadAfterXWeeks > 0) 
        {
            <div class="mb-3 mt-3">
                <label asp-for="DeloadDurationWeeks" class="control-label">@Html.DisplayNameFor(_ => Model.DeloadDurationWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <input id="@(Html.IdFor(_ => Model.DeloadDurationWeeks))" type="number" asp-for="DeloadDurationWeeks" style="width:6ch;height:fit-content;"
                           oninput="@Html.IdFor(_ => Model.DeloadDurationWeeks)Input.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" aria-describedby="deload-duration-help"
                               name="@Html.IdFor(_ => Model.DeloadDurationWeeks)Input" id="@Html.IdFor(_ => Model.DeloadDurationWeeks)-input"
                               min="@UserConsts.DeloadDurationMin" max="@UserConsts.DeloadDurationMax" step="1" value="@Model.DeloadDurationWeeks"
                               oninput="@(Html.IdFor(_ => Model.DeloadDurationWeeks)).value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="DeloadDurationWeeks" class="text-danger"></span>
                <div id="deload-duration-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.DeloadDurationWeeks)</div>
            </div>
        }
        else 
        {
            <input type="hidden" asp-for="DeloadDurationWeeks" />
        }
        
        @if (Model.UserTask.Type == UserTaskType.Log) 
        {
            <div class="mb-3 mt-3">
                <label asp-for="ReferenceMin" class="control-label">@Html.DisplayNameFor(_ => Model.ReferenceMin)</label>
                <div style="display:flex;column-gap:1ex;">
                    <input id="@(Html.IdFor(_ => Model.ReferenceMin))" type="number" asp-for="ReferenceMin" style="width:6ch;height:fit-content;"
                           oninput="@Html.IdFor(_ => Model.ReferenceMin)Input.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" aria-describedby="reference-min-help"
                               name="@Html.IdFor(_ => Model.ReferenceMin)Input" id="@Html.IdFor(_ => Model.ReferenceMin)-input"
                               min="0" max="100" step="1" value="@Model.ReferenceMin"
                               oninput="@(Html.IdFor(_ => Model.ReferenceMin)).value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="ReferenceMin" class="text-danger"></span>
                <div id="reference-min-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.ReferenceMin)</div>
            </div>

            <div class="mb-3 mt-3">
                <label asp-for="ReferenceMax" class="control-label">@Html.DisplayNameFor(_ => Model.ReferenceMax)</label>
                <div style="display:flex;column-gap:1ex;">
                    <input id="@(Html.IdFor(_ => Model.ReferenceMax))" type="number" asp-for="ReferenceMax" style="width:6ch;height:fit-content;"
                           oninput="@Html.IdFor(_ => Model.ReferenceMax)Input.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" aria-describedby="reference-max-help"
                               name="@Html.IdFor(_ => Model.ReferenceMax)Input" id="@Html.IdFor(_ => Model.ReferenceMax)-input"
                               min="0" max="100" step="1" value="@Model.ReferenceMax"
                               oninput="@(Html.IdFor(_ => Model.ReferenceMax)).value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="ReferenceMax" class="text-danger"></span>
                <div id="reference-max-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.ReferenceMax)</div>
            </div>
        }

        <div class="form-check mb-3">
            <label asp-for="PersistUntilComplete" class="control-label">@Html.DisplayNameFor(_ => Model.PersistUntilComplete)</label>
            <input class="form-check-input" asp-for="PersistUntilComplete" aria-describedby="persist-help" />
            <span asp-validation-for="PersistUntilComplete" class="text-danger"></span>
            <div id="persist-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.PersistUntilComplete)</div>
        </div>

        <div class="form-check mb-3">
            <label asp-for="Enabled" class="control-label">@Html.DisplayNameFor(_ => Model.Enabled)</label>
            <input class="form-check-input" asp-for="Enabled" aria-describedby="disabled-help" />
            <span asp-validation-for="Enabled" class="text-danger"></span>
            <div id="disabled-help" class="form-text">
                @Html.DisplayDescriptionFor(_ => Model.Enabled)
                @if (!String.IsNullOrWhiteSpace(Model.DisabledReason))
                {
                    <div><b>Disabled Reason</b> - @Model.DisabledReason</div>
                }
            </div>
        </div>
    </form>

    <div class="row justify-content-end gy-2">
        <div class="col">
            <input type="submit" value="Save" class="btn btn-primary" form="task-form" />
        </div>
        @if (Model.UserTask.Id != default)
        {
            <div class="col-auto">
                <form id="delete-form" asp-controller="@UserController.Name" asp-action="@nameof(UserController.RemoveTask)" method="post"
                      asp-route-email="@Model.User.Email" asp-route-section="@Model.ManageSection" asp-route-token="@Model.Token">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" name="TaskId" asp-for="@Model.UserTask.Id" />

                    <input type="submit" value="Delete" class="btn btn-outline-danger" form="delete-form" />
                </form>
            </div>
        }
    </div>
</div>
