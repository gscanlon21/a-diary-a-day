@model Web.ViewModels.Shared.ScoreChartViewModel

<div style="height:min(70vw, 300px)">
    <canvas id="@Model.Id"></canvas>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script>
    if (document.getElementById('@Model.Id')) {
        Chart.defaults.font.size = 16;
        new Chart(document.getElementById('@Model.Id'), {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Prorated Score',
                    data: @Json.Serialize(Model.ProratedScores),
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'middle',
                    parsing: {
                        //xAxisKey: 'x',
                        yAxisKey: 'y'
                    }
                }, {
                    label: 'Average Score',
                    data: @Json.Serialize(Model.AverageScores),
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'middle',
                    parsing: {
                        //xAxisKey: 'x',
                        yAxisKey: 'y'
                    }
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                parsing: {
                    xAxisKey: 'x',
                    //yAxisKey: 'y'
                },
                scales: {
                    y: {
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: false,
                            text: 'Score',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                            // Customize the y-axis tick name
                            //callback: function (value, index, ticks) {
                            //    var enumMap = @(Json.Serialize(Enum.GetNames<Mood>()));
                            //    return enumMap[index];
                            //}
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: {
                        // Don't show the graph legend
                        display: false,
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return context.map(c => new Date(c.parsed.x).toDateString());
                            },
                            footer: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return context.map(c => { console.debug(c); return `${c.raw.count}/${c.raw.total} question answered`; });
                            },
                        },
                    },
                    /*
                    decimation: {
                        enabled: true,
                        algorithm: 'lttb',
                        samples: 12,
                    },
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                    },
                    */
                },
            }
        });
    }
</script>