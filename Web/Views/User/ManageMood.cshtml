@model UserManageMoodViewModel
@using System.Numerics
@using Core.Models.Exercise
@using Core.Dtos.Newsletter
@using Core.Consts

@{
    ViewData[ViewData_Blank.Title] = "Manage";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Mood</h1>
    </div>
    <partial name="_ValidationMessagePartial" model='new ValidationMessagePartialModel() { WasUpdated = Model.WasUpdated, GoBackOnSave = true }' />
</div>

<div class="row gy-2">
    @if (Model.User.Components.HasFlag(Components.Mood))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(MoodViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.Sleep))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(SleepViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.People))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(PeopleViewComponent.Name, new { Model.User })
        </div>
    }
        
    @if (Model.User.Components.HasFlag(Components.Symptom))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(SymptomViewComponent.Name, new { Model.User })
        </div>
    }
 
    @if (Model.User.Components.HasFlag(Components.Emotion))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(EmotionViewComponent.Name, new { Model.User })
        </div>
    }
    
    @if (Model.User.Components.HasFlag(Components.Activity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(ActivityViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.Medicine))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(MedicineViewComponent.Name, new { Model.User })
        </div>
    }
        
    @if (Model.User.Components.HasFlag(Components.AcuteStressSeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(AcuteStressSeverityViewComponent.Name, new { Model.User })
        </div>
    }
  
    @if (Model.User.Components.HasFlag(Components.AgoraphobiaSeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(AgoraphobiaSeverityViewComponent.Name, new { Model.User })
        </div>
    }
       
    @if (Model.User.Components.HasFlag(Components.DepressionSeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(DepressionSeverityViewComponent.Name, new { Model.User })
        </div>
    }
    
    @if (Model.User.Components.HasFlag(Components.DissociativeSeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(DissociativeSeverityViewComponent.Name, new { Model.User })
        </div>
    }
        
    @if (Model.User.Components.HasFlag(Components.GeneralizedAnxietySeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(GeneralizedAnxietySeverityViewComponent.Name, new { Model.User })
        </div>
    }
  
    @if (Model.User.Components.HasFlag(Components.PanicSeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(PanicSeverityViewComponent.Name, new { Model.User })
        </div>
    }
        
    @if (Model.User.Components.HasFlag(Components.PTSDSeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(PostTraumaticStressSeverityViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.SocialAnxietySeverity))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(SocialAnxietySeverityViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.CompleteMetabolicPanel))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(CompleteMetabolicPanelViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.DryEyes))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(DryEyesViewComponent.Name, new { Model.User })
        </div>
    }

    @if (Model.User.Components.HasFlag(Components.FeastAllergens))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(FeastAllergensViewComponent.Name, new { Model.User })
        </div>
    }
        
    @if (Model.User.Components.HasFlag(Components.Journal))
    {
        <div class="col-lg-6">
            @await Component.InvokeAsync(JournalViewComponent.Name, new { Model.User })
        </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial", new Web.ViewModels.Shared.ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser });
    }
}