@model UserManageMoodViewModel
@using System.Numerics
@using Core.Models.Exercise
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter
@using Core.Consts

@{
    ViewData[ViewData_Blank.Title] = "Manage";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Mood</h1>
    </div>
    <div class="col-lg-6 m-0--empty">@if (Model.WasUpdated == false)
    {
        <div class="alert alert-danger alert-dismissible mb-1" role="alert">
            <span>Something went wrong.</span>
            <button type="button" class="btn-close allow-demo" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }
    else if (Model.WasUpdated == true)
    {
        <div class="alert alert-success alert-dismissible mb-1" role="alert">
                <span>Your preferences have been saved. Changes will be reflected in the next email.</span>
            <button type="button" class="btn-close allow-demo" data-dismiss=".alert" aria-label="Close"></button>
        </div>
    }</div>
</div>

<div class="alert alert-secondary">
    <div class="row gy-2">
        <div class="col-lg-6">
            <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.ManageMood)" method="post"
                   asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-section="@Model.Parameters.Section" asp-route-variationId="@Model.Parameters.VariationId" asp-route-exerciseId="@Model.Parameters.ExerciseId"
                   style="min-height:21ch;">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group mb-3 mt-3">
                    <label class="control-label">@Html.DisplayNameFor(_ => Model.Weight)</label>
                    <div><span asp-validation-for="Weight" class="text-danger"></span></div>
                    <div style="display:flex;column-gap:1ex;">
                        <input type="number" asp-for="Weight" style="width:6ch;height:fit-content;" class="allow-demo"
                               oninput="poundsInput.value = this.valueAsNumber" />
                        <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                            <input type="range" style="width:100%;" class="allow-demo"
                                   name="poundsInput" list="hashmarks" id="pounds-input"
                                   min="0" max="5" step="1" value="@Model.Weight"
                                   oninput="@(Html.NameFor(_ => Model.Weight)).value = this.valueAsNumber" />

                            <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>

                                <!-- These need to be separate from the <option> elements because those have their position attribute overriden (from absolute to static) on Firefox -->
                                <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="1" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(20% - .5ch)">Poor</div>
                                <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="2" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(40% - .5ch)">Okay</div>
                                <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="3" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(60% - .5ch)">Decent</div>
                                <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="4" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(80% - .5ch)">Good</div>
                                <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="5" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;right:-2.5ch">Great</div>
                            </datalist>
                        </div>
                    </div>
                    <div id="pounds-help" class="form-text"></div>
                </div>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary allow-demo" />
                </div>
            </form>

            <div style="height:min(70vw, 300px)">
                <canvas id="myChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script>
    if (document.getElementById('myChart')) {
        Chart.defaults.font.size = 16;
        new Chart(document.getElementById('myChart'), {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Weight',
                    data: @Json.Serialize(Model.Xys),
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'before',
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                scales: {
                    y: {
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: false,
                            text: 'Weight',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: {
                        // Don't show the graph legend
                        display: false,
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return context.map(c => new Date(c.parsed.x).toDateString());
                            },
                        },
                    },
                    /*
                    decimation: {
                        enabled: true,
                        algorithm: 'lttb',
                        samples: 12,
                    },
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                    },
                    */
                },
            }
        });
    }
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial", new Web.ViewModels.Shared.ValidationScriptsPartialViewModel() { IsDemoUser = false });
    }
}