@model UserManageComponentViewModel
@using System.Numerics
@using Core.Models.Components
@using Core.Dtos.Newsletter
@using Core.Consts

@{
    ViewData[ViewData_Blank.Title] = "Manage";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage @Model.Component.GetSingleDisplayName()</h1>
    </div>
    <partial name="_ValidationMessagePartial" model='new ValidationMessagePartialModel() { WasUpdated = Model.WasUpdated, GoBackOnSave = true }' />
</div>

@if (Model.Component.HasFlag(Core.Models.Components.Component.Mood))
{
    @await Component.InvokeAsync(MoodViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Sleep))
{
    @await Component.InvokeAsync(SleepViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.People))
{
    @await Component.InvokeAsync(PeopleViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Symptom))
{
    @await Component.InvokeAsync(SymptomViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Emotion))
{
    @await Component.InvokeAsync(EmotionViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Activity))
{
    @await Component.InvokeAsync(ActivityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Medicine))
{
    @await Component.InvokeAsync(MedicineViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.AcuteStressSeverity))
{
    @await Component.InvokeAsync(AcuteStressSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.AgoraphobiaSeverity))
{
    @await Component.InvokeAsync(AgoraphobiaSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Depression))
{
    @await Component.InvokeAsync(DepressionViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.DepressionSeverity))
{
    @await Component.InvokeAsync(DepressionSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.DissociativeSeverity))
{
    @await Component.InvokeAsync(DissociativeSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GeneralizedAnxietySeverity))
{
    @await Component.InvokeAsync(GeneralizedAnxietySeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.PanicSeverity))
{
    @await Component.InvokeAsync(PanicSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.PTSDSeverity))
{
    @await Component.InvokeAsync(PostTraumaticStressSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.SocialAnxietySeverity))
{
    @await Component.InvokeAsync(SocialAnxietySeverityViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.CompleteMetabolicPanel))
{
    @await Component.InvokeAsync(CompleteMetabolicPanelViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.CbcWAutoDiff))
{
    @await Component.InvokeAsync(CbcWAutoDiffViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.BloodWork))
{
    @await Component.InvokeAsync(BloodWorkViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutPillars))
{
    @await Component.InvokeAsync(GutPillarsViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutFungi))
{
    @await Component.InvokeAsync(GutFungiViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutMicronutrients))
{
    @await Component.InvokeAsync(GutMicronutrientsViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutShortChainFattyAcids))
{
    @await Component.InvokeAsync(GutShortChainFattyAcidsViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutPathogens))
{
    @await Component.InvokeAsync(GutPathogensViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutProbiotics))
{
    @await Component.InvokeAsync(GutProbioticsViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutConditionalBacteria))
{
    @await Component.InvokeAsync(GutConditionalBacteriaViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutBadBacteria))
{
    @await Component.InvokeAsync(GutBadBacteriaViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.GutGoodBacteria))
{
    @await Component.InvokeAsync(GutGoodBacteriaViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.DryEyes))
{
    @await Component.InvokeAsync(DryEyesViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.FeastAllergens))
{
    @await Component.InvokeAsync(FeastAllergensViewComponent.Name, new { Model.User })
}
else if (Model.Component.HasFlag(Core.Models.Components.Component.Journal))
{
    @await Component.InvokeAsync(JournalViewComponent.Name, new { Model.User })
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial", new ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser });
    }
}