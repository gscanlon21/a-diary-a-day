@model UserManageTaskViewModel
@using System.Numerics
@using Web.Views.Shared
@using Core.Consts
@using Web.Components
@using Web.Components.UserTask

@{
    ViewData[ViewData_Blank.Title] = "Manage Task";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Task</h1>
    </div>
    <partial name="_ValidationMessagePartial" model='new ValidationMessagePartialModel() { WasUpdated = Model.WasUpdated, GoBackOnSave = true }' />
</div>

<div class="alert alert-secondary">
    <div class="row gy-2">
        <div class="col-lg-6">
            <h6 class="mb-1">Task</h6>
            @await Component.InvokeAsync(ManageTaskViewComponent.Name, new { Model.User, Model.Task, Model.Section })
        </div>

        <div class="col-lg-6">
            <div class="row align-items-center mb-1">
                <div class="col">
                    <h6 class="mb-0">Log</h6>
                </div>
                <div class="col-auto">
                    <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.ShowLog)" method="post" class="form-check-reverse"
                          asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" asp-route-section="@Model.Section" asp-route-taskId="@Model.Task.Id">
                        <input asp-for="Task.ShowLog" class="form-check-input" type="checkbox" onchange="document.getElementById('task-log-submit').click();" />
                        <label asp-for="Task.ShowLog" class="form-check-label">Show Log</label>
                        <button id="task-log-submit" type="submit" class="d-none"></button>
                    </form>
                </div>
            </div>
            @await Component.InvokeAsync(TaskLogViewComponent.Name, new { Model.User, Model.Task })
        </div>
    </div>
</div>

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage @Model.Task.Type.GetSingleDisplayName()</h1>
    </div>
</div>

@if (Model.Task.Type == UserTaskType.Mood)
{
    @await Component.InvokeAsync(MoodViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Sleep)
{
    @await Component.InvokeAsync(SleepViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.People)
{
    @await Component.InvokeAsync(PeopleViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Symptom)
{
    @await Component.InvokeAsync(SymptomViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Emotion)
{
    @await Component.InvokeAsync(EmotionViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Activity)
{
    @await Component.InvokeAsync(ActivityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Medicine)
{
    @await Component.InvokeAsync(MedicineViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.AcuteStressSeverity)
{
    @await Component.InvokeAsync(AcuteStressSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.AgoraphobiaSeverity)
{
    @await Component.InvokeAsync(AgoraphobiaSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Depression)
{
    @await Component.InvokeAsync(DepressionViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.DepressionSeverity)
{
    @await Component.InvokeAsync(DepressionSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.DissociativeSeverity)
{
    @await Component.InvokeAsync(DissociativeSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.GeneralizedAnxietySeverity)
{
    @await Component.InvokeAsync(GeneralizedAnxietySeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.PanicSeverity)
{
    @await Component.InvokeAsync(PanicSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.PTSDSeverity)
{
    @await Component.InvokeAsync(PostTraumaticStressSeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.SocialAnxietySeverity)
{
    @await Component.InvokeAsync(SocialAnxietySeverityViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.CompleteMetabolicPanel)
{
    @await Component.InvokeAsync(CompleteMetabolicPanelViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.CbcWAutoDiff)
{
    @await Component.InvokeAsync(CbcWAutoDiffViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.BloodWork)
{
    @await Component.InvokeAsync(BloodWorkViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.DryEyes)
{
    @await Component.InvokeAsync(DryEyesViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.FeastAllergens)
{
    @await Component.InvokeAsync(FeastAllergensViewComponent.Name, new { Model.User })
}
else if (Model.Task.Type == UserTaskType.Journal)
{
    @await Component.InvokeAsync(JournalViewComponent.Name, new { Model.User })
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" model='new ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser }' />
}
